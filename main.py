import requests
import pandas as pd
from utils.data_manager import DataManager
from utils.taxonomy_translator import TaxonomyTranslator
import time


class AnimalFinder:
    def __init__(self):
        self.data_manager = DataManager()
        self.translator = TaxonomyTranslator()
        self.region_translations = {
            '–ê–º—É—Ä—Å–∫–∞—è': 'Amur',
            '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è': 'Moscow',
            '–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è': 'Leningrad',
            '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∞—è': 'Krasnodar',
            '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞—è': 'Novosibirsk',
            '–ë—Ä—è–Ω—Å–∫–∞—è': 'Bryansk',
            '–ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–∞—è': 'Nizhny Novgorod',
            '–¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω': 'Tatarstan'
        }

    def get_region_by_coordinates(self, latitude, longitude):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–µ–≥–∏–æ–Ω –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º"""
        return self.data_manager.get_region_by_coordinates(latitude, longitude)
    2
    def show_regions_statistics(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º —Ä–µ–≥–∏–æ–Ω–∞–º"""
        print("\nüìä –°–û–•–†–ê–ù–ï–ù–ù–´–ï –î–ê–ù–ù–´–ï –ü–û –†–ï–ì–ò–û–ù–ê–ú:")
        print("=" * 60)

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ–≥–∏–æ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞ –∫–ª—é—á–µ–π
        all_regions = self.data_manager.get_all_regions()

        if not all_regions:
            print("‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–≥–∏–æ–Ω–∞—Ö")
            return

        print(f"{'–†–µ–≥–∏–æ–Ω':<25} {'–í—Å–µ–≥–æ':<6} {'–í–∏–¥–æ–≤':<6} {'–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–ª–∞—Å—Å–∞–º'}")
        print("-" * 60)

        for region_en, region_info in all_regions.items():
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω–∞
            region_data = self.data_manager.get_region_data(region_en)

            if region_data:
                df = pd.DataFrame(region_data)
                region_name = region_info.get('name_ru', region_en)
                total = len(region_data)
                species = df['scientific_name'].nunique()

                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª–∞—Å—Å–∞–º - –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥
                class_stats = {}
                for animal in region_data:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º class_ru –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –æ–±—ã—á–Ω—ã–π class
                    animal_class = animal.get('class_ru')
                    if not animal_class or animal_class == '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
                        animal_class = animal.get('class', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')

                    if animal_class and animal_class != '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
                        class_stats[animal_class] = class_stats.get(animal_class, 0) + 1

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ –∫–ª–∞—Å—Å–∞–º
                class_dist = []
                for class_name, count in list(class_stats.items())[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3
                    short_name = class_name[:12] + '..' if len(class_name) > 12 else class_name
                    class_dist.append(f"{short_name}:{count}")

                distribution_str = ", ".join(class_dist)
                if len(class_stats) > 3:
                    distribution_str += " ..."

                print(f"{region_name:<25} {total:<6} {species:<6} {distribution_str}")
            else:
                print(f"{region_info.get('name_ru', region_en):<25} {'-':<6} {'-':<6} –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

    def get_available_regions_list(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å"""
        all_regions = self.data_manager.get_all_regions()

        if all_regions:
            available = []
            for region_en, region_info in all_regions.items():
                region_data = self.data_manager.get_region_data(region_en)
                if region_data and len(region_data) > 0:
                    available.append(region_info.get('name_ru', region_en))
            return available
        else:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–≥–∏–æ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –∑–Ω–∞–µ–º —á—Ç–æ —Ä–∞–±–æ—Ç–∞—é—Ç
            return ["Krasnodar", "Moscow", "Tatarstan", "Amur", "Bryansk", "Nizhny Novgorod"]

    def analyze_region_improved(self, region_name_ru):
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–≥–∏–æ–Ω–∞ —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ –∫–ª–∞—Å—Å–∞–º"""
        animals = self.get_animals_by_region(region_name_ru)

        if not animals:
            print(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ {region_name_ru}")
            return

        df = pd.DataFrame(animals)

        print(f"\n{'=' * 60}")
        print(f"üêæ –ê–ù–ê–õ–ò–ó –ñ–ò–í–û–¢–ù–´–• –í {region_name_ru.upper()} –û–ë–õ–ê–°–¢–ò")
        print(f"{'=' * 60}")

        print(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"–í—Å–µ–≥–æ –Ω–∞—Ö–æ–¥–æ–∫: {len(animals)}")
        print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–∏–¥–æ–≤: {df['scientific_name'].nunique()}")

        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–ª–∞—Å—Å–∞–º —Å –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ–º –≤–∏–¥–æ–≤ - –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥
        class_groups = {}
        for animal in animals:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º class_ru –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –æ–±—ã—á–Ω—ã–π class
            class_name = animal.get('class_ru')
            if not class_name or class_name == '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
                class_name = animal.get('class', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')

            if class_name not in class_groups:
                class_groups[class_name] = []
            class_groups[class_name].append(animal)

        for class_name, group_animals in class_groups.items():
            if class_name and class_name != '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
                class_count = len(group_animals)
                percentage = (class_count / len(animals)) * 100

                print(f"\nüìà {class_name.upper()} - {class_count} ({percentage:.1f}%):")

                # –¢–æ–ø –≤–∏–¥–æ–≤ –≤ —ç—Ç–æ–º –∫–ª–∞—Å—Å–µ
                species_counts = {}
                for animal in group_animals:
                    species = animal['scientific_name']
                    species_counts[species] = species_counts.get(species, 0) + 1

                top_species = sorted(species_counts.items(), key=lambda x: x[1], reverse=True)[:5]

                for i, (species, count) in enumerate(top_species, 1):
                    # –ù–∞—Ö–æ–¥–∏–º common_name –¥–ª—è —ç—Ç–æ–≥–æ –≤–∏–¥–∞
                    common_name = next(
                        (a.get('common_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ') for a in group_animals if a['scientific_name'] == species),
                        '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                    display_name = common_name if common_name != '–ù–µ —É–∫–∞–∑–∞–Ω–æ' else species
                    print(f"   {i}. {display_name} - {count} –Ω–∞—Ö–æ–¥–æ–∫")

    def show_detailed_animal_info_improved(self, animals, count=5):
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –≤—ã–≤–æ–¥ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö"""
        print(f"\nüîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û {min(count, len(animals))} –ñ–ò–í–û–¢–ù–´–•:")

        for i, animal in enumerate(animals[:count], 1):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—É—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ—Ç —Ä—É—Å—Å–∫–æ–≥–æ
            display_name = animal.get('common_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            if display_name == '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
                display_name = animal['scientific_name']

            print(f"\n{i}. {display_name}")
            print(f"   –ù–∞—É—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {animal['scientific_name']}")

            # –í—ã–≤–æ–¥–∏–º —Ç–∞–∫—Å–æ–Ω–æ–º–∏—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º - –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥
            taxon_info = []

            # –¢–∏–ø
            phylum = animal.get('phylum_ru', animal.get('phylum', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))
            if phylum != '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
                taxon_info.append(f"–¢–∏–ø: {phylum}")

            # –ö–ª–∞—Å—Å
            animal_class = animal.get('class_ru', animal.get('class', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))
            if animal_class != '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
                taxon_info.append(f"–ö–ª–∞—Å—Å: {animal_class}")

            # –û—Ç—Ä—è–¥
            order = animal.get('order_ru', animal.get('order', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))
            if order != '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
                taxon_info.append(f"–û—Ç—Ä—è–¥: {order}")

            # –°–µ–º–µ–π—Å—Ç–≤–æ
            family = animal.get('family_ru', animal.get('family', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))
            if family != '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
                taxon_info.append(f"–°–µ–º–µ–π—Å—Ç–≤–æ: {family}")

            if taxon_info:
                print(f"   {' | '.join(taxon_info)}")

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            if animal.get('locality') and animal['locality'] != '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
                print(f"   –ú–µ—Å—Ç–æ: {animal['locality']}")
            if animal.get('eventDate') and animal['eventDate'] != '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
                # –û–±—Ä–µ–∑–∞–µ–º –≤—Ä–µ–º—è, –µ—Å–ª–∏ –µ—Å—Ç—å
                date_str = animal['eventDate'].split('T')[0] if 'T' in animal['eventDate'] else animal['eventDate']
                print(f"   –î–∞—Ç–∞: {date_str}")

    def get_animals_by_coordinates(self, latitude, longitude, force_update=False):
        """–ü–æ–ª—É—á–∞–µ—Ç –∂–∏–≤–æ—Ç–Ω—ã—Ö –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º - –ø—Ä–æ–±—É–µ–º –æ–±–∞ –º–µ—Ç–æ–¥–∞"""
        print(f"üìç –ü–æ–∏—Å–∫ –∂–∏–≤–æ—Ç–Ω—ã—Ö –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {latitude}, {longitude}")

        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞
        region_ru, region_en = self.get_region_by_coordinates(latitude, longitude)
        animals_by_region = self.get_animals_by_region(region_ru, force_update)

        if animals_by_region:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(animals_by_region)} –∂–∏–≤–æ—Ç–Ω—ã—Ö —á–µ—Ä–µ–∑ —Ä–µ–≥–∏–æ–Ω '{region_ru}'")
            return animals_by_region
        else:
            print(f"‚ùå –ß–µ—Ä–µ–∑ —Ä–µ–≥–∏–æ–Ω '{region_ru}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö, –ø—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π –ø–æ–∏—Å–∫...")
            # –ü—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
            animals_direct = self.get_animals_by_coordinates_direct(latitude, longitude)

            if animals_direct:
                print(f"‚úÖ –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –Ω–∞—à–µ–ª {len(animals_direct)} –∂–∏–≤–æ—Ç–Ω—ã—Ö")
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö –ø–æ–¥ —Ä–µ–≥–∏–æ–Ω–æ–º
                if region_ru != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–≥–∏–æ–Ω":
                    self.data_manager.save_region_data(region_en, region_ru, animals_direct)
                return animals_direct
            else:
                print("‚ùå –û–±–∞ –º–µ—Ç–æ–¥–∞ –Ω–µ –¥–∞–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                return []

    def check_available_regions(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–≥–∏–æ–Ω—ã, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ñ–ò–í–û–¢–ù–´–•"""
        print("\nüó∫Ô∏è –†–ï–ì–ò–û–ù–´ –° –î–ê–ù–ù–´–ú–ò –û –ñ–ò–í–û–¢–ù–´–• –í GBIF:")
        print("=" * 50)

        test_regions = [
            ('Amur', '–ê–º—É—Ä—Å–∫–∞—è'),
            ('Moscow', '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è'),
            ('Moscow Oblast', '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª.'),
            ('Krasnodar', '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∞—è'),
            ('Leningrad', '–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è'),
            ('Saint Petersburg', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥'),
            ('Novosibirsk', '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞—è'),
            ('Khabarovsk', '–•–∞–±–∞—Ä–æ–≤—Å–∫–∏–π'),
            ('Primorsky', '–ü—Ä–∏–º–æ—Ä—Å–∫–∏–π'),
            ('Sverdlovsk', '–°–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∞—è'),
            ('Rostov', '–†–æ—Å—Ç–æ–≤—Å–∫–∞—è'),
            ('Chelyabinsk', '–ß–µ–ª—è–±–∏–Ω—Å–∫–∞—è'),
            ('Irkutsk', '–ò—Ä–∫—É—Ç—Å–∫–∞—è'),
            ('Tatarstan', '–¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω'),
            ('Bashkortostan', '–ë–∞—à–∫–æ—Ä—Ç–æ—Å—Ç–∞–Ω'),
            ('Crimea', '–ö—Ä—ã–º')
        ]

        animal_regions = []

        for region_en, region_ru in test_regions:
            base_url = "https://api.gbif.org/v1"

            # –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö
            params = {
                'country': 'RU',
                'stateProvince': region_en,
                'kingdom': 'Animalia',
                'hasCoordinate': 'true',  # –¢–æ–ª—å–∫–æ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
                'limit': 10
            }

            try:
                response = requests.get(f"{base_url}/occurrence/search", params=params, timeout=10)
                if response.status_code == 200:
                    data = response.json()
                    if data['count'] > 0:
                        # –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∂–∏–≤–æ—Ç–Ω—ã–µ
                        animal_count = 0
                        for record in data.get('results', [])[:5]:
                            kingdom = record.get('kingdom', '').lower()
                            if kingdom == 'animalia':
                                animal_count += 1

                        status = "‚úÖ –ñ–ò–í–û–¢–ù–´–ï" if animal_count > 0 else "‚ùå –ù–ï–¢ –ñ–ò–í–û–¢–ù–´–•"
                        animal_regions.append((region_ru, region_en, data['count'], animal_count))
                        print(
                            f"{region_ru:20} {region_en:20} {data['count']:6} –∑–∞–ø. {animal_count}/5 –∂–∏–≤–æ—Ç–Ω—ã—Ö {status}")
                    else:
                        print(f"{region_ru:20} {region_en:20} {'-':6} –∑–∞–ø. ‚ùå –ù–ï–¢ –î–ê–ù–ù–´–•")
                else:
                    print(f"{region_ru:20} {region_en:20} –û–®–ò–ë–ö–ê API: {response.status_code}")
            except Exception as e:
                print(f"{region_ru:20} {region_en:20} –û–®–ò–ë–ö–ê: {e}")

        print(f"\nüéØ –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –†–ï–ì–ò–û–ù–´ –° –ñ–ò–í–û–¢–ù–´–ú–ò:")
        for region_ru, region_en, total, animals in animal_regions:
            if animals > 0:
                print(f"   ‚Ä¢ {region_ru} ({region_en}) - {total} –∑–∞–ø–∏—Å–µ–π")

        return animal_regions

    def _fetch_from_api(self, region_name_en, region_name_ru):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ GBIF API - —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∂–∏–≤–æ—Ç–Ω—ã—Ö"""
        base_url = "https://api.gbif.org/v1"

        # –£–ª—É—á—à–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
        params_list = [
            # –ó–∞–ø—Ä–æ—Å 1: –¢–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã –∂–∏–≤–æ—Ç–Ω—ã—Ö
            {
                'country': 'RU',
                'stateProvince': region_name_en,
                'class': 'Mammalia,Aves,Reptilia,Amphibia,Insecta,Arachnida,Actinopterygii',
                'hasCoordinate': 'true',
                'basisOfRecord': 'HUMAN_OBSERVATION,OBSERVATION',
                'limit': 200
            },
            # –ó–∞–ø—Ä–æ—Å 2: –¢–æ–ª—å–∫–æ –∂–∏–≤–æ—Ç–Ω—ã–µ —Å –Ω–∞–±–ª—é–¥–µ–Ω–∏—è–º–∏
            {
                'country': 'RU',
                'stateProvince': region_name_en,
                'kingdom': 'Animalia',
                'hasCoordinate': 'true',
                'basisOfRecord': 'HUMAN_OBSERVATION,OBSERVATION',
                'limit': 200
            },
            # –ó–∞–ø—Ä–æ—Å 3: –ú–µ–Ω–µ–µ —Å—Ç—Ä–æ–≥–∏–π —Ñ–∏–ª—å—Ç—Ä
            {
                'country': 'RU',
                'stateProvince': region_name_en,
                'kingdom': 'Animalia',
                'hasCoordinate': 'true',
                'limit': 200
            }
        ]

        for i, params in enumerate(params_list):
            print(f"üîó –ü–æ–ø—ã—Ç–∫–∞ {i + 1}: class={params.get('class', 'Animalia')}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –¥–ª—è —ç—Ç–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            cached_data = self.data_manager.get_api_cache(params)
            if cached_data:
                print("‚ôªÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ API")
                return cached_data

            try:
                response = requests.get(f"{base_url}/occurrence/search", params=params, timeout=30)
                if response.status_code == 200:
                    data = response.json()
                    print(f"üìä API –≤–µ—Ä–Ω—É–ª {data['count']} –∑–∞–ø–∏—Å–µ–π")

                    if data['count'] > 0:
                        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –Ω–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ
                        animal_data = self._process_api_response_strict(data.get('results', []))

                        if animal_data:
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                            self.data_manager.save_api_cache(params, animal_data)
                            print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫—ç—à: {len(animal_data)} –∂–∏–≤–æ—Ç–Ω—ã—Ö")
                            return animal_data
                        else:
                            print("‚ö†Ô∏è –ó–∞–ø–∏—Å–∏ –Ω–∞–π–¥–µ–Ω—ã, –Ω–æ –Ω–µ –ø—Ä–æ—à–ª–∏ —Å—Ç—Ä–æ–≥—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é")
                            # –ü–æ–∫–∞–∂–µ–º —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω–∞—à–ª–∏
                            self._debug_first_records(data.get('results', [])[:3])
                    else:
                        print("‚ùå –ó–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")

        return []

    def _process_api_response_strict(self, records):
        """–°—Ç—Ä–æ–≥–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è - –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ —è–≤–Ω—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö"""
        animal_data = []

        print(f"üîç –°—Ç—Ä–æ–≥–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è {len(records)} –∑–∞–ø–∏—Å–µ–π...")

        for i, record in enumerate(records):
            kingdom = record.get('kingdom', '').lower()
            phylum = record.get('phylum', '').lower()
            class_name = record.get('class', '').lower()

            # –°–¢–†–û–ì–ò–ï –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö
            is_definitely_animal = (
                # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ü–∞—Ä—Å—Ç–≤–∞
                    kingdom == 'animalia' or
                    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã –∂–∏–≤–æ—Ç–Ω—ã—Ö
                    phylum in ['chordata', 'arthropoda', 'mollusca'] or
                    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã –∂–∏–≤–æ—Ç–Ω—ã—Ö
                    class_name in [
                        'mammalia', 'aves', 'reptilia', 'amphibia', 'actinopterygii',
                        'insecta', 'arachnida', 'gastropoda', 'bivalvia', 'malacostraca'
                    ]
            )

            # –Ø–≤–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ä–∞—Å—Ç–µ–Ω–∏–π (–∏—Å–∫–ª—é—á–∞–µ–º)
            is_definitely_plant = (
                    kingdom == 'plantae' or
                    phylum in ['magnoliophyta', 'tracheophyta', 'bryophyta'] or
                    class_name in ['magnoliopsida', 'liliopsida', 'pinopsida']
            )

            if is_definitely_plant:
                continue

            if not is_definitely_animal:
                continue

            # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞ - —ç—Ç–æ –∂–∏–≤–æ—Ç–Ω–æ–µ
            species_key = record.get('speciesKey')
            common_name_ru = self._get_russian_common_name(species_key)

            animal_info = {
                'scientific_name': record.get('scientificName', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'common_name': common_name_ru,
                'kingdom': record.get('kingdom', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'phylum': record.get('phylum', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'class': record.get('class', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'order': record.get('order', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'family': record.get('family', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'genus': record.get('genus', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'species': record.get('species', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'decimalLatitude': record.get('decimalLatitude'),
                'decimalLongitude': record.get('decimalLongitude'),
                'locality': record.get('locality', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'stateProvince': record.get('stateProvince', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'country': record.get('country', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'eventDate': record.get('eventDate', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'basisOfRecord': record.get('basisOfRecord', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'speciesKey': species_key,
                'record_id': record.get('key')
            }
            animal_data.append(animal_info)

        print(f"‚úÖ –ü–æ—Å–ª–µ —Å—Ç—Ä–æ–≥–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {len(animal_data)} –∂–∏–≤–æ—Ç–Ω—ã—Ö")
        return animal_data

    def get_animals_by_coordinates_radius(self, latitude, longitude, radius_km=50, limit=100):
        """–ü–æ–∏—Å–∫ –∂–∏–≤–æ—Ç–Ω—ã—Ö –≤ —Ä–∞–¥–∏—É—Å–µ –æ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
        print(f"üìç –ü–æ–∏—Å–∫ –≤ —Ä–∞–¥–∏—É—Å–µ {radius_km} –∫–º –æ—Ç {latitude}, {longitude}")

        base_url = "https://api.gbif.org/v1"

        params = {
            'decimalLatitude': latitude,
            'decimalLongitude': longitude,
            'coordinateUncertaintyInMeters': radius_km * 1000,
            'class': 'Mammalia,Aves,Reptilia,Amphibia,Insecta',
            'hasCoordinate': 'true',
            'basisOfRecord': 'HUMAN_OBSERVATION,OBSERVATION',
            'limit': limit
        }

        try:
            response = requests.get(f"{base_url}/occurrence/search", params=params, timeout=30)
            if response.status_code == 200:
                data = response.json()
                print(f"üìä –ù–∞–π–¥–µ–Ω–æ {data['count']} –∑–∞–ø–∏—Å–µ–π –≤ —Ä–∞–¥–∏—É—Å–µ {radius_km} –∫–º")

                animal_data = self._process_api_response_strict(data.get('results', []))
                return animal_data
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
                return []

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ —Ä–∞–¥–∏—É—Å—É: {e}")
            return []

    def _debug_first_records(self, records):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–≤—ã—Ö –∑–∞–ø–∏—Å—è—Ö"""
        print("\nüîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ù–ê–ô–î–ï–ù–ù–´–• –ó–ê–ü–ò–°–Ø–•:")
        for i, record in enumerate(records):
            print(f"\n{i + 1}. {record.get('scientificName', 'N/A')}")
            print(f"   Kingdom: {record.get('kingdom', 'N/A')}")
            print(f"   Phylum: {record.get('phylum', 'N/A')}")
            print(f"   Class: {record.get('class', 'N/A')}")
            print(f"   Order: {record.get('order', 'N/A')}")
            print(f"   BasisOfRecord: {record.get('basisOfRecord', 'N/A')}")
            print(f"   Dataset: {record.get('datasetName', 'N/A')}")

    def search_known_russian_animals(self, region_name_en, limit=50):
        """–ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö –†–æ—Å—Å–∏–∏"""
        print(f"üîç –ü–æ–∏—Å–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö –†–æ—Å—Å–∏–∏ –≤ —Ä–µ–≥–∏–æ–Ω–µ {region_name_en}")

        # –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –∂–∏–≤–æ—Ç–Ω—ã–µ –†–æ—Å—Å–∏–∏
        known_animals = [
            "Ursus arctos",  # –ë—É—Ä—ã–π –º–µ–¥–≤–µ–¥—å
            "Canis lupus",  # –í–æ–ª–∫
            "Vulpes vulpes",  # –õ–∏—Å–∏—Ü–∞
            "Lepus timidus",  # –ó–∞—è—Ü-–±–µ–ª—è–∫
            "Sciurus vulgaris",  # –û–±—ã–∫–Ω–æ–≤–µ–Ω–Ω–∞—è –±–µ–ª–∫–∞
            "Cervus elaphus",  # –ë–ª–∞–≥–æ—Ä–æ–¥–Ω—ã–π –æ–ª–µ–Ω—å
            "Alces alces",  # –õ–æ—Å—å
            "Capreolus capreolus",  # –ö–æ—Å—É–ª—è
            "Lynx lynx",  # –†—ã—Å—å
            "Martes zibellina",  # –°–æ–±–æ–ª—å
            "Mustela erminea",  # –ì–æ—Ä–Ω–æ—Å—Ç–∞–π
            "Meles meles",  # –ë–∞—Ä—Å—É–∫
            "Castor fiber",  # –û–±—ã–∫–Ω–æ–≤–µ–Ω–Ω—ã–π –±–æ–±—Ä
            "Sus scrofa",  # –ö–∞–±–∞–Ω
            "Erinaceus europaeus",  # –û–±—ã–∫–Ω–æ–≤–µ–Ω–Ω—ã–π —ë–∂
            "Lacerta agilis",  # –ü—Ä—ã—Ç–∫–∞—è —è—â–µ—Ä–∏—Ü–∞
            "Natrix natrix",  # –û–±—ã–∫–Ω–æ–≤–µ–Ω–Ω—ã–π —É–∂
            "Bombina bombina",  # –ö—Ä–∞—Å–Ω–æ–±—Ä—é—Ö–∞—è –∂–µ—Ä–ª—è–Ω–∫–∞
            "Rana temporaria"  # –¢—Ä–∞–≤—è–Ω–∞—è –ª—è–≥—É—à–∫–∞
        ]

        base_url = "https://api.gbif.org/v1"
        all_animals = []

        for animal in known_animals[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–º –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
            params = {
                'scientificName': animal,
                'country': 'RU',
                'stateProvince': region_name_en,
                'hasCoordinate': 'true',
                'limit': 10
            }

            try:
                response = requests.get(f"{base_url}/occurrence/search", params=params, timeout=10)
                if response.status_code == 200:
                    data = response.json()
                    if data['count'] > 0:
                        print(f"‚úÖ {animal}: {len(data['results'])} –∑–∞–ø–∏—Å–µ–π")
                        all_animals.extend(data['results'])
                    else:
                        print(f"‚ùå {animal}: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                time.sleep(0.2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ {animal}: {e}")

        animal_data = self._process_api_response(all_animals)
        print(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(animal_data)} –∂–∏–≤–æ—Ç–Ω—ã—Ö –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –≤–∏–¥–æ–≤")
        return animal_data

    def get_animals_by_region(self, region_name_ru, force_update=False):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –∂–∏–≤–æ—Ç–Ω—ã—Ö –ø–æ —Ä–µ–≥–∏–æ–Ω—É"""
        region_name_en = self.region_translations.get(region_name_ru, region_name_ru)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        if not force_update and self.data_manager.region_exists(region_name_en):
            print(f"üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {region_name_ru}")
            region_data = self.data_manager.get_region_data(region_name_en)
            if region_data:
                # –ü–µ—Ä–µ–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ
                translated_data = [self.translator.translate_animal_data(animal) for animal in region_data]
                return translated_data

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API
        print(f"üåê –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API –¥–ª—è {region_name_ru}")

        # –°–Ω–∞—á–∞–ª–∞ –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫
        animal_data = self._fetch_from_api(region_name_en, region_name_ru)

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö
        if not animal_data:
            print(f"ü¶å –ü—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö...")
            animal_data = self.search_known_russian_animals(region_name_en)

        if animal_data:
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
            translated_data = [self.translator.translate_animal_data(animal) for animal in animal_data]

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            success = self.data_manager.save_region_data(region_name_en, region_name_ru, translated_data)
            if success:
                print(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ {region_name_ru}")
            return translated_data
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {region_name_ru}")
            return []

    def _fetch_from_api(self, region_name_en, region_name_ru):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ GBIF API"""
        base_url = "https://api.gbif.org/v1"

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        params = {
            'country': 'RU',
            'stateProvince': region_name_en,
            'kingdom': 'Animalia',
            'limit': 1000
        }

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cached_data = self.data_manager.get_api_cache(params)
        if cached_data:
            print("‚ôªÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ API")
            return cached_data

        try:
            print(f"üîó –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ GBIF API...")
            response = requests.get(f"{base_url}/occurrence/search", params=params, timeout=30)
            if response.status_code == 200:
                data = response.json()
                print(f"üìä API –≤–µ—Ä–Ω—É–ª {data['count']} –∑–∞–ø–∏—Å–µ–π")

                animal_data = self._process_api_response(data.get('results', []))

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                self.data_manager.save_api_cache(params, animal_data)
                print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫—ç—à: {len(animal_data)} –∂–∏–≤–æ—Ç–Ω—ã—Ö")

                return animal_data
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
                return []

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
            return []

    def _process_api_response(self, records):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç API - —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–æ–π"""
        animal_data = []
        rejected_records = []

        print(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(records)} –∑–∞–ø–∏—Å–µ–π...")

        for i, record in enumerate(records):
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–≤—ã—Ö 3 –∑–∞–ø–∏—Å—è—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if i < 3:
                print(f"\nüìã –ó–ê–ü–ò–°–¨ {i + 1}:")
                print(f"   –ù–∞—É—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {record.get('scientificName', 'N/A')}")
                print(f"   Kingdom: {record.get('kingdom', 'N/A')}")
                print(f"   Phylum: {record.get('phylum', 'N/A')}")
                print(f"   Class: {record.get('class', 'N/A')}")
                print(f"   BasisOfRecord: {record.get('basisOfRecord', 'N/A')}")

            # –ì–∏–±–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∂–∏–≤–æ—Ç–Ω—ã—Ö
            kingdom = record.get('kingdom', '').lower()
            phylum = record.get('phylum', '').lower()
            class_name = record.get('class', '').lower()
            basis_of_record = record.get('basisOfRecord', '').lower()

            # –ü—Ä–∏–∑–Ω–∞–∫–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö
            animal_indicators = [
                kingdom == 'animalia',
                phylum in ['chordata', 'arthropoda', 'mollusca', 'annelida', 'cnidaria', 'echinodermata'],
                class_name in [
                    'mammalia', 'aves', 'reptilia', 'amphibia', 'actinopterygii',
                    'insecta', 'arachnida', 'gastropoda', 'bivalvia', 'malacostraca',
                    'actinopoda', 'aves', 'branchiopoda', 'cephalopoda', 'clitellata',
                    'demospongiae', 'entognatha', 'eurotatoria', 'gymnolaemata',
                    'holothuroidea', 'hydrozoa', 'maxillopoda', 'merostomata',
                    'monogononta', 'oligochaeta', 'ostracoda', 'polychaeta',
                    'polyplacophora', 'scyphozoa', 'tentaculata', 'turbellaria'
                ]
            ]

            # –ü—Ä–∏–∑–Ω–∞–∫–∏ —Ä–∞—Å—Ç–µ–Ω–∏–π (–∏—Å–∫–ª—é—á–∞–µ–º)
            plant_indicators = [
                kingdom == 'plantae',
                phylum in ['magnoliophyta', 'tracheophyta', 'bryophyta', 'marchantiophyta'],
                class_name in ['magnoliopsida', 'liliopsida', 'pinopsida', 'lycopodiopsida'],
                'plant' in basis_of_record,
                'herbarium' in basis_of_record
            ]

            # –ü—Ä–∏–∑–Ω–∞–∫–∏ –≥—Ä–∏–±–æ–≤ (–∏—Å–∫–ª—é—á–∞–µ–º)
            fungus_indicators = [
                kingdom == 'fungi',
                phylum in ['ascomycota', 'basidiomycota']
            ]

            is_animal = any(animal_indicators)
            is_plant = any(plant_indicators)
            is_fungus = any(fungus_indicators)

            if is_plant or is_fungus:
                if i < 3:
                    print(f"   ‚ùå –û–¢–ö–õ–û–ù–ï–ù–û: —Ä–∞—Å—Ç–µ–Ω–∏–µ –∏–ª–∏ –≥—Ä–∏–±")
                rejected_records.append(('plant/fungus', record.get('scientificName')))
                continue

            if not is_animal:
                if i < 3:
                    print(f"   ‚ùå –û–¢–ö–õ–û–ù–ï–ù–û: –Ω–µ –∂–∏–≤–æ—Ç–Ω–æ–µ")
                rejected_records.append(('not_animal', record.get('scientificName')))
                continue

            # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞ - —ç—Ç–æ –∂–∏–≤–æ—Ç–Ω–æ–µ
            if i < 3:
                print(f"   ‚úÖ –ü–†–ò–ù–Ø–¢–û: –∂–∏–≤–æ—Ç–Ω–æ–µ")

            species_key = record.get('speciesKey')
            common_name_ru = self._get_russian_common_name(species_key)

            animal_info = {
                'scientific_name': record.get('scientificName', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'common_name': common_name_ru,
                'kingdom': record.get('kingdom', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'phylum': record.get('phylum', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'class': record.get('class', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'order': record.get('order', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'family': record.get('family', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'genus': record.get('genus', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'species': record.get('species', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'decimalLatitude': record.get('decimalLatitude'),
                'decimalLongitude': record.get('decimalLongitude'),
                'locality': record.get('locality', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'stateProvince': record.get('stateProvince', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'country': record.get('country', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'eventDate': record.get('eventDate', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'basisOfRecord': record.get('basisOfRecord', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'speciesKey': species_key,
                'record_id': record.get('key')
            }
            animal_data.append(animal_info)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç—Å–µ–≤–∞
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –§–ò–õ–¨–¢–†–ê–¶–ò–ò:")
        print(f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö: {len(animal_data)}")
        print(f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(rejected_records)}")

        if rejected_records:
            rejection_reasons = {}
            for reason, name in rejected_records:
                rejection_reasons[reason] = rejection_reasons.get(reason, 0) + 1
            print(f"üìà –ü—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: {rejection_reasons}")

        return animal_data

    def get_animals_by_coordinates(self, latitude, longitude, force_update=False):
        """–ü–æ–ª—É—á–∞–µ—Ç –∂–∏–≤–æ—Ç–Ω—ã—Ö –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º - —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è"""
        print(f"üìç –ü–æ–∏—Å–∫ –∂–∏–≤–æ—Ç–Ω—ã—Ö –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {latitude}, {longitude}")

        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–≥–∏–æ–Ω
        region_ru, region_en = self.get_region_by_coordinates(latitude, longitude)
        print(f"üéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ä–µ–≥–∏–æ–Ω: {region_ru}")

        # –ü—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –ø–æ —Ä–µ–≥–∏–æ–Ω—É
        animals_by_region = self.get_animals_by_region(region_ru, force_update)

        if animals_by_region:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(animals_by_region)} –∂–∏–≤–æ—Ç–Ω—ã—Ö —á–µ—Ä–µ–∑ —Ä–µ–≥–∏–æ–Ω '{region_ru}'")
            return animals_by_region
        else:
            print(f"‚ùå –ß–µ—Ä–µ–∑ —Ä–µ–≥–∏–æ–Ω '{region_ru}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö")

            # –ü—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –≤ —Ä–∞–¥–∏—É—Å–µ –æ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            print("üîç –ü—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –≤ —Ä–∞–¥–∏—É—Å–µ –æ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç...")
            animals_radius = self.get_animals_by_coordinates_radius(latitude, longitude)

            if animals_radius:
                print(f"‚úÖ –ü–æ–∏—Å–∫ –ø–æ —Ä–∞–¥–∏—É—Å—É –Ω–∞—à–µ–ª {len(animals_radius)} –∂–∏–≤–æ—Ç–Ω—ã—Ö")
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö –ø–æ–¥ —Ä–µ–≥–∏–æ–Ω–æ–º
                if region_ru != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–≥–∏–æ–Ω":
                    self.data_manager.save_region_data(region_en, region_ru, animals_radius)
                return animals_radius
            else:
                print("‚ùå –í—Å–µ –º–µ—Ç–æ–¥—ã –Ω–µ –¥–∞–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                return []

    def _get_russian_common_name(self, species_key):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–∞"""
        if not species_key:
            return '–ù–µ —É–∫–∞–∑–∞–Ω–æ'

        try:
            response = requests.get(f"https://api.gbif.org/v1/species/{species_key}/vernacularNames", timeout=5)
            if response.status_code == 200:
                vernacular_data = response.json()
                for vernacular in vernacular_data.get('results', []):
                    if vernacular.get('language') == 'rus':
                        return vernacular.get('vernacularName')
        except:
            pass

        return '–ù–µ —É–∫–∞–∑–∞–Ω–æ'

    def test_popular_regions(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫ –≤ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö"""
        test_coordinates = [
            (55.7558, 37.6173, "–ú–æ—Å–∫–≤–∞"),  # –ú–æ—Å–∫–≤–∞
            (59.9343, 30.3351, "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"),  # –°–ü–±
            (45.0355, 38.9753, "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä"),  # –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä
            (56.8389, 60.6057, "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥"),  # –°–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∞—è
            (54.9833, 73.3667, "–û–º—Å–∫"),  # –û–º—Å–∫–∞—è
            (56.3269, 44.0065, "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥"),  # –ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–∞—è
            (55.7963, 49.1088, "–ö–∞–∑–∞–Ω—å"),  # –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω
        ]

        print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–ü–£–õ–Ø–†–ù–´–• –†–ï–ì–ò–û–ù–û–í:")
        print("=" * 50)

        for lat, lon, region_name in test_coordinates:
            print(f"\nüìç –¢–µ—Å—Ç–∏—Ä—É–µ–º {region_name} ({lat}, {lon})")
            animals = self.get_animals_by_coordinates(lat, lon)

            if animals:
                print(f"‚úÖ –£–°–ü–ï–•: –Ω–∞–π–¥–µ–Ω–æ {len(animals)} –∂–∏–≤–æ—Ç–Ω—ã—Ö")
                # –ü–æ–∫–∞–∂–µ–º —Ç–æ–ø-3
                df = pd.DataFrame(animals)
                top_species = df['scientific_name'].value_counts().head(3)
                for species, count in top_species.items():
                    common_name = df[df['scientific_name'] == species]['common_name'].iloc[0]
                    print(
                        f"   ‚Ä¢ {species} ({common_name if common_name != '–ù–µ —É–∫–∞–∑–∞–Ω–æ' else '–Ω–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è'}) - {count}")
            else:
                print(f"‚ùå –ù–ï –£–î–ê–õ–û–°–¨: –∂–∏–≤–æ—Ç–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    def analyze_region(self, region_name_ru):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω–∞"""
        animals = self.get_animals_by_region(region_name_ru)

        if not animals:
            print(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ {region_name_ru}")
            return

        print(f"\n{'=' * 60}")
        print(f"üêæ –ê–ù–ê–õ–ò–ó –ñ–ò–í–û–¢–ù–´–• –í {region_name_ru.upper()} –û–ë–õ–ê–°–¢–ò")
        print(f"{'='*60}")

        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(animals)}")
        print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–∏–¥–æ–≤: {len(set([a['scientific_name'] for a in animals]))}")

        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–ª–∞—Å—Å–∞–º
        class_counts = {}
        for animal in animals:
            class_name = animal.get('class_ru', animal.get('class', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))
            class_counts[class_name] = class_counts.get(class_name, 0) + 1

        print(f"\nüìà –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –ö–õ–ê–°–°–ê–ú:")
        for class_name, count in sorted(class_counts.items(), key=lambda x: x[1], reverse=True):
            percentage = (count / len(animals)) * 100
            print(f"  {class_name}: {count} ({percentage:.1f}%)")

        # –¢–æ–ø –≤–∏–¥–æ–≤
        species_counts = {}
        for animal in animals:
            species_name = animal['scientific_name']
            common_name = animal.get('common_name', '–ù–µ—Ç —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è')
            species_counts[species_name] = species_counts.get(species_name, {'count': 0, 'common_name': common_name})
            species_counts[species_name]['count'] += 1

        top_species = sorted(species_counts.items(), key=lambda x: x[1]['count'], reverse=True)[:5]

        if top_species:
            print(f"\nüèÜ –¢–û–ü-5 –í–ò–î–û–í:")
            for i, (species, info) in enumerate(top_species, 1):
                common_name = info['common_name']
                class_name = next(a.get('class_ru', a.get('class', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')) for a in animals if
                                   a['scientific_name'] == species)
                print(f"{i}. {species}")
                print(f"   üìù {common_name}" if common_name != '–ù–µ —É–∫–∞–∑–∞–Ω–æ' else "   üìù –ù–µ—Ç —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è")
                print(f"   üêæ {class_name}")
                print(f"   üéØ –ù–∞—Ö–æ–¥–æ–∫: {info['count']}")
                print()

    def show_detailed_animal_info(self, animals, count=5):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö"""
        print(f"\nüîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û {count} –ñ–ò–í–û–¢–ù–´–•:")
        for i, animal in enumerate(animals[:count], 1):
            print(f"\n{i}. {animal.get('common_name', '–ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è')}")
            print(f"   –ù–∞—É—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {animal['scientific_name']}")
            print(f"   –¢–∏–ø: {animal.get('phylum_ru', animal.get('phylum', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))}")
            print(f"   –ö–ª–∞—Å—Å: {animal.get('class_ru', animal.get('class', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))}")
            print(f"   –û—Ç—Ä—è–¥: {animal.get('order_ru', animal.get('order', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))}")
            print(f"   –°–µ–º–µ–π—Å—Ç–≤–æ: {animal.get('family_ru', animal.get('family', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))}")
            print(f"   –†–æ–¥: {animal.get('genus_ru', animal.get('genus', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))}")
            if animal.get('locality') and animal['locality'] != '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
                print(f"   –ú–µ—Å—Ç–æ: {animal['locality']}")
            if animal.get('eventDate') and animal['eventDate'] != '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
                print(f"   –î–∞—Ç–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è: {animal['eventDate']}")


# –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
def main():
    finder = AnimalFinder()

    print("üêæ –°–ò–°–¢–ï–ú–ê –ü–û–ò–°–ö–ê –ñ–ò–í–û–¢–ù–´–• –ü–û –ö–û–û–†–î–ò–ù–ê–¢–ê–ú")
    print("=" * 50)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤
    finder.show_regions_statistics()

    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã
    available_regions = finder.get_available_regions_list()

    while True:
        print(f"\nüéØ –î–û–°–¢–£–ü–ù–´–ï –†–ï–ì–ò–û–ù–´: {', '.join(available_regions)}")
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:")
        print("1. –ü–æ–∏—Å–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º")
        print("2. –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ä–µ–≥–∏–æ–Ω–∞")
        print("3. –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–≥–∏–æ–Ω–æ–≤")
        print("4. –í—ã—Ö–æ–¥")

        choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1-4): ").strip()

        if choice == '1':
            # –†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
            try:
                lat_input = input("–í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–æ—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 55.7558): ").strip().replace(',', '.')
                lon_input = input("–í–≤–µ–¥–∏—Ç–µ –¥–æ–ª–≥–æ—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 37.6173): ").strip().replace(',', '.')

                lat = float(lat_input)
                lon = float(lon_input)

                animals = finder.get_animals_by_coordinates(lat, lon)
                if animals:
                    region_ru, region_en = finder.get_region_by_coordinates(lat, lon)
                    finder.analyze_region_improved(region_ru)
                    finder.show_detailed_animal_info_improved(animals)
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç")

            except ValueError:
                print("‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç")

        elif choice == '2':
            # –†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω—É
            print(f"\nüí° –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã: {', '.join(available_regions)}")
            region_input = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞: ").strip()

            animals = finder.get_animals_by_region(region_input)
            if animals:
                finder.analyze_region_improved(region_input)
                finder.show_detailed_animal_info_improved(animals)
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ {region_input}")

        elif choice == '3':
            # –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            finder.show_regions_statistics()
            available_regions = finder.get_available_regions_list()

        elif choice == '4':
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break

        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")


if __name__ == "__main__":
    main()