import requests
import pandas as pd
from utils.data_manager import DataManager
from utils.taxonomy_translator import TaxonomyTranslator
import time
from utils.russian_animals_db import RussianAnimalsDB
import sys
import time
from tqdm import tqdm

class AnimalFinder:
    def __init__(self):
        self.data_manager = DataManager()
        self.translator = TaxonomyTranslator()
        self.animals_db = RussianAnimalsDB()
        self.common_name_cache = {}

    def show_all_regions_list(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ –†–æ—Å—Å–∏–∏"""
        print("\n" + "=" * 80)
        print("üó∫Ô∏è  –ü–û–õ–ù–´–ô –°–ü–ò–°–û–ö –†–ï–ì–ò–û–ù–û–í –†–û–°–°–ò–ò")
        print("=" * 80)

        # –ü–æ–ª—É—á–∞–µ–º —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã –∏–∑ DataManager
        regions_by_type = self.data_manager.get_regions_by_type()
        all_regions = self.data_manager.get_all_regions_list()

        print(f"–í—Å–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–æ–≤: {len(all_regions)}")
        print()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–≥–∏–æ–Ω—ã –ø–æ —Ç–∏–ø–∞–º
        for region_type, regions in regions_by_type.items():
            if regions:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ –≥—Ä—É–ø–ø—ã
                print(f"üìå {region_type.upper()} ({len(regions)}):")
                for i, region in enumerate(regions, 1):
                    english_name = self.data_manager.russian_to_english.get(region, 'N/A')
                    print(f"   {i:2d}. {region:<35} ‚Üí {english_name}")
                print()

    def show_available_regions_with_data(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–≥–∏–æ–Ω—ã, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Å–∏—Å—Ç–µ–º–µ"""
        print("\n" + "=" * 80)
        print("üìä –†–ï–ì–ò–û–ù–´ –° –î–ê–ù–ù–´–ú–ò –í –°–ò–°–¢–ï–ú–ï")
        print("=" * 80)

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–≥–∏–æ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞ –∫–ª—é—á–µ–π (—Ç–µ, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö —É–∂–µ —Å–æ–±—Ä–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ)
        saved_regions = self.data_manager.get_all_regions()

        if not saved_regions:
            print("‚ùå –í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∏ –ø–æ –æ–¥–Ω–æ–º—É —Ä–µ–≥–∏–æ–Ω—É")
            return []

        print("–†–µ–≥–∏–æ–Ω—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:")
        print("-" * 50)

        available_with_data = []
        for region_en, region_info in saved_regions.items():
            region_data = self.data_manager.get_region_data(region_en)
            if region_data:
                region_name_ru = region_info.get('name_ru', region_en)
                record_count = len(region_data)
                species_count = len(set([a['scientific_name'] for a in region_data]))

                print(f"‚úÖ {region_name_ru:<25} - {record_count:4} –∑–∞–ø–∏—Å–µ–π, {species_count:3} –≤–∏–¥–æ–≤")
                available_with_data.append(region_name_ru)

        return available_with_data

    def get_region_by_coordinates(self, latitude, longitude):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–µ–≥–∏–æ–Ω –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º"""
        return self.data_manager.get_region_by_coordinates(latitude, longitude)
    2
    def show_regions_statistics(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º —Ä–µ–≥–∏–æ–Ω–∞–º"""
        print("\nüìä –°–û–•–†–ê–ù–ï–ù–ù–´–ï –î–ê–ù–ù–´–ï –ü–û –†–ï–ì–ò–û–ù–ê–ú:")
        print("=" * 60)

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ–≥–∏–æ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞ –∫–ª—é—á–µ–π
        all_regions = self.data_manager.get_all_regions()

        if not all_regions:
            print("‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–≥–∏–æ–Ω–∞—Ö")
            return

        print(f"{'–†–µ–≥–∏–æ–Ω':<25} {'–í—Å–µ–≥–æ':<6} {'–í–∏–¥–æ–≤':<6} {'–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–ª–∞—Å—Å–∞–º'}")
        print("-" * 60)

        for region_en, region_info in all_regions.items():
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω–∞
            region_data = self.data_manager.get_region_data(region_en)

            if region_data:
                df = pd.DataFrame(region_data)
                region_name = region_info.get('name_ru', region_en)
                total = len(region_data)
                species = df['scientific_name'].nunique()

                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª–∞—Å—Å–∞–º - –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥
                class_stats = {}
                for animal in region_data:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º class_ru –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –æ–±—ã—á–Ω—ã–π class
                    animal_class = animal.get('class_ru')
                    if not animal_class or animal_class == '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
                        animal_class = animal.get('class', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')

                    if animal_class and animal_class != '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
                        class_stats[animal_class] = class_stats.get(animal_class, 0) + 1

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ –∫–ª–∞—Å—Å–∞–º
                class_dist = []
                for class_name, count in list(class_stats.items())[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3
                    short_name = class_name[:12] + '..' if len(class_name) > 12 else class_name
                    class_dist.append(f"{short_name}:{count}")

                distribution_str = ", ".join(class_dist)
                if len(class_stats) > 3:
                    distribution_str += " ..."

                print(f"{region_name:<25} {total:<6} {species:<6} {distribution_str}")
            else:
                print(f"{region_info.get('name_ru', region_en):<25} {'-':<6} {'-':<6} –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

    def get_available_regions_list(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å"""
        all_regions = self.data_manager.get_all_regions()

        if all_regions:
            available = []
            for region_en, region_info in all_regions.items():
                region_data = self.data_manager.get_region_data(region_en)
                if region_data and len(region_data) > 0:
                    available.append(region_info.get('name_ru', region_en))
            return available
        else:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–≥–∏–æ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –∑–Ω–∞–µ–º —á—Ç–æ —Ä–∞–±–æ—Ç–∞—é—Ç
            return ["Krasnodar", "Moscow", "Tatarstan", "Amur", "Bryansk", "Nizhny Novgorod"]

    def _get_russian_common_name_cached(self, species_key):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        if not species_key:
            return '–ù–µ —É–∫–∞–∑–∞–Ω–æ'

        if species_key in self.common_name_cache:
            return self.common_name_cache[species_key]

        common_name = self._get_russian_common_name(species_key)
        self.common_name_cache[species_key] = common_name
        return common_name

    def analyze_region_improved(self, region_name_ru):
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–≥–∏–æ–Ω–∞ —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ –∫–ª–∞—Å—Å–∞–º –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
        animals = self.get_animals_by_region(region_name_ru)

        if not animals:
            print(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ {region_name_ru}")
            return

        # –ü–†–ò–ú–ï–ù–Ø–ï–ú –§–ò–õ–¨–¢–†–ê–¶–ò–Æ –î–û –ê–ù–ê–õ–ò–ó–ê
        filtered_animals = self.filter_animals_data(animals, min_count=2)

        if not filtered_animals:
            print(f"üéØ –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –∑–Ω–∞—á–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ {region_name_ru}")
            return

        df = pd.DataFrame(filtered_animals)

        print(f"\n{'=' * 60}")
        print(f"üêæ –ê–ù–ê–õ–ò–ó –ñ–ò–í–û–¢–ù–´–• –í {region_name_ru.upper()} –û–ë–õ–ê–°–¢–ò")
        print(f"{'=' * 60}")

        print(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"–í—Å–µ–≥–æ –Ω–∞—Ö–æ–¥–æ–∫: {len(filtered_animals)}")
        print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–∏–¥–æ–≤: {df['scientific_name'].nunique()}")

        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–ª–∞—Å—Å–∞–º —Å –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ–º –≤–∏–¥–æ–≤ - –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥
        class_groups = {}
        for animal in filtered_animals:  # –ò–°–ü–û–õ–¨–ó–£–ï–ú –û–¢–§–ò–õ–¨–¢–†–û–í–ê–ù–ù–´–ï –î–ê–ù–ù–´–ï
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º class_ru –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –æ–±—ã—á–Ω—ã–π class
            class_name = animal.get('class_ru')
            if not class_name or class_name == '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
                class_name = animal.get('class', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')

            if class_name not in class_groups:
                class_groups[class_name] = []
            class_groups[class_name].append(animal)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—ã–µ –∫–ª–∞—Å—Å—ã
        significant_classes = 0
        for class_name, group_animals in class_groups.items():
            if class_name and class_name != '–ù–µ —É–∫–∞–∑–∞–Ω–æ' and len(group_animals) >= 2:  # –ú–∏–Ω–∏–º—É–º 2 –∂–∏–≤–æ—Ç–Ω—ã–µ –≤ –∫–ª–∞—Å—Å–µ
                class_count = len(group_animals)
                percentage = (class_count / len(filtered_animals)) * 100

                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∫–ª–∞—Å—Å—ã
                if class_name in ['–ù–∞—Å–µ–∫–æ–º—ã–µ', '–ü–∞—É–∫–æ–æ–±—Ä–∞–∑–Ω—ã–µ', '–î–∏–ø–ª–æ–ø–æ–¥—ã', '–ì—É–±–∫–∏']:
                    continue

                print(f"\nüìà {class_name.upper()} - {class_count} ({percentage:.1f}%):")
                significant_classes += 1

                # –¢–æ–ø –≤–∏–¥–æ–≤ –≤ —ç—Ç–æ–º –∫–ª–∞—Å—Å–µ
                species_counts = {}
                for animal in group_animals:
                    species = animal['scientific_name']
                    species_counts[species] = species_counts.get(species, 0) + 1

                top_species = sorted(species_counts.items(), key=lambda x: x[1], reverse=True)[:5]

                for i, (species, count) in enumerate(top_species, 1):
                    # –ù–∞—Ö–æ–¥–∏–º common_name –¥–ª—è —ç—Ç–æ–≥–æ –≤–∏–¥–∞
                    common_name = next(
                        (a.get('common_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ') for a in group_animals if a['scientific_name'] == species),
                        '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                    display_name = common_name if common_name != '–ù–µ —É–∫–∞–∑–∞–Ω–æ' else species
                    print(f"   {i}. {display_name} - {count} –Ω–∞—Ö–æ–¥–æ–∫")

        if significant_classes == 0:
            print("üéØ –ù–µ—Ç –∑–Ω–∞—á–∏–º—ã—Ö –∫–ª–∞—Å—Å–æ–≤ –∂–∏–≤–æ—Ç–Ω—ã—Ö –¥–ª—è –ø–æ–∫–∞–∑–∞")

    def show_detailed_animal_info_improved(self, animals, count=8):
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –≤—ã–≤–æ–¥ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
        # –§–ò–õ–¨–¢–†–£–ï–ú –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º
        filtered_animals = self.filter_animals_data(animals, min_count=1)  # –ú–∏–Ω–∏–º—É–º 1 –Ω–∞—Ö–æ–¥–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞

        if not filtered_animals:
            print("üéØ –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –∑–Ω–∞—á–∏–º—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö –¥–ª—è –ø–æ–∫–∞–∑–∞")
            return

        display_count = min(count, len(filtered_animals))
        print(f"\nüîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û {display_count} –ñ–ò–í–û–¢–ù–´–•:")

        for i, animal in enumerate(filtered_animals[:display_count], 1):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—É—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ—Ç —Ä—É—Å—Å–∫–æ–≥–æ
            display_name = animal.get('common_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            if display_name == '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
                display_name = animal['scientific_name']

            print(f"\n{i}. {display_name}")
            print(f"   –ù–∞—É—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {animal['scientific_name']}")

            # –í—ã–≤–æ–¥–∏–º —Ç–∞–∫—Å–æ–Ω–æ–º–∏—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º - –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥
            taxon_info = []

            # –¢–∏–ø
            phylum = animal.get('phylum_ru', animal.get('phylum', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))
            if phylum != '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
                taxon_info.append(f"–¢–∏–ø: {phylum}")

            # –ö–ª–∞—Å—Å
            animal_class = animal.get('class_ru', animal.get('class', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))
            if animal_class != '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
                taxon_info.append(f"–ö–ª–∞—Å—Å: {animal_class}")

            # –û—Ç—Ä—è–¥
            order = animal.get('order_ru', animal.get('order', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))
            if order != '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
                taxon_info.append(f"–û—Ç—Ä—è–¥: {order}")

            # –°–µ–º–µ–π—Å—Ç–≤–æ
            family = animal.get('family_ru', animal.get('family', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))
            if family != '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
                taxon_info.append(f"–°–µ–º–µ–π—Å—Ç–≤–æ: {family}")

            if taxon_info:
                print(f"   {' | '.join(taxon_info)}")

            # –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
            source = animal.get('source', 'GBIF')
            if source == 'local_db':
                print(f"   üìö –ò—Å—Ç–æ—á–Ω–∏–∫: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
            else:
                print(f"   üåê –ò—Å—Ç–æ—á–Ω–∏–∫: GBIF")

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å)
            if animal.get('locality') and animal['locality'] != '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
                print(f"   üìç –ú–µ—Å—Ç–æ: {animal['locality']}")
            if animal.get('eventDate') and animal['eventDate'] != '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
                # –û–±—Ä–µ–∑–∞–µ–º –≤—Ä–µ–º—è, –µ—Å–ª–∏ –µ—Å—Ç—å
                date_str = animal['eventDate'].split('T')[0] if 'T' in animal['eventDate'] else animal['eventDate']
                print(f"   üìÖ –î–∞—Ç–∞: {date_str}")

    def get_animals_by_coordinates(self, latitude, longitude, force_update=False):
        """–ü–æ–ª—É—á–∞–µ—Ç –∂–∏–≤–æ—Ç–Ω—ã—Ö –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º - –ø—Ä–æ–±—É–µ–º –æ–±–∞ –º–µ—Ç–æ–¥–∞"""
        print(f"üìç –ü–æ–∏—Å–∫ –∂–∏–≤–æ—Ç–Ω—ã—Ö –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {latitude}, {longitude}")

        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞
        region_ru, region_en = self.get_region_by_coordinates(latitude, longitude)
        animals_by_region = self.get_animals_by_region(region_ru, force_update)

        if animals_by_region:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(animals_by_region)} –∂–∏–≤–æ—Ç–Ω—ã—Ö —á–µ—Ä–µ–∑ —Ä–µ–≥–∏–æ–Ω '{region_ru}'")
            return animals_by_region
        else:
            print(f"‚ùå –ß–µ—Ä–µ–∑ —Ä–µ–≥–∏–æ–Ω '{region_ru}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö, –ø—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π –ø–æ–∏—Å–∫...")
            # –ü—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
            animals_direct = self.get_animals_by_coordinates_direct(latitude, longitude)

            if animals_direct:
                print(f"‚úÖ –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –Ω–∞—à–µ–ª {len(animals_direct)} –∂–∏–≤–æ—Ç–Ω—ã—Ö")
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö –ø–æ–¥ —Ä–µ–≥–∏–æ–Ω–æ–º
                if region_ru != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–≥–∏–æ–Ω":
                    self.data_manager.save_region_data(region_en, region_ru, animals_direct)
                return animals_direct
            else:
                print("‚ùå –û–±–∞ –º–µ—Ç–æ–¥–∞ –Ω–µ –¥–∞–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                return []

    def check_available_regions(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–≥–∏–æ–Ω—ã, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ñ–ò–í–û–¢–ù–´–•"""
        print("\nüó∫Ô∏è –†–ï–ì–ò–û–ù–´ –° –î–ê–ù–ù–´–ú–ò –û –ñ–ò–í–û–¢–ù–´–• –í GBIF:")
        print("=" * 50)

        test_regions = [
            ('Amur', '–ê–º—É—Ä—Å–∫–∞—è'),
            ('Moscow', '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è'),
            ('Moscow Oblast', '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª.'),
            ('Krasnodar', '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∞—è'),
            ('Leningrad', '–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è'),
            ('Saint Petersburg', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥'),
            ('Novosibirsk', '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞—è'),
            ('Khabarovsk', '–•–∞–±–∞—Ä–æ–≤—Å–∫–∏–π'),
            ('Primorsky', '–ü—Ä–∏–º–æ—Ä—Å–∫–∏–π'),
            ('Sverdlovsk', '–°–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∞—è'),
            ('Rostov', '–†–æ—Å—Ç–æ–≤—Å–∫–∞—è'),
            ('Chelyabinsk', '–ß–µ–ª—è–±–∏–Ω—Å–∫–∞—è'),
            ('Irkutsk', '–ò—Ä–∫—É—Ç—Å–∫–∞—è'),
            ('Tatarstan', '–¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω'),
            ('Bashkortostan', '–ë–∞—à–∫–æ—Ä—Ç–æ—Å—Ç–∞–Ω'),
            ('Crimea', '–ö—Ä—ã–º')
        ]

        animal_regions = []

        for region_en, region_ru in test_regions:
            base_url = "https://api.gbif.org/v1"

            # –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö
            params = {
                'country': 'RU',
                'stateProvince': region_en,
                'kingdom': 'Animalia',
                'hasCoordinate': 'true',  # –¢–æ–ª—å–∫–æ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
                'limit': 10
            }

            try:
                response = requests.get(f"{base_url}/occurrence/search", params=params, timeout=10)
                if response.status_code == 200:
                    data = response.json()
                    if data['count'] > 0:
                        # –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∂–∏–≤–æ—Ç–Ω—ã–µ
                        animal_count = 0
                        for record in data.get('results', [])[:5]:
                            kingdom = record.get('kingdom', '').lower()
                            if kingdom == 'animalia':
                                animal_count += 1

                        status = "‚úÖ –ñ–ò–í–û–¢–ù–´–ï" if animal_count > 0 else "‚ùå –ù–ï–¢ –ñ–ò–í–û–¢–ù–´–•"
                        animal_regions.append((region_ru, region_en, data['count'], animal_count))
                        print(
                            f"{region_ru:20} {region_en:20} {data['count']:6} –∑–∞–ø. {animal_count}/5 –∂–∏–≤–æ—Ç–Ω—ã—Ö {status}")
                    else:
                        print(f"{region_ru:20} {region_en:20} {'-':6} –∑–∞–ø. ‚ùå –ù–ï–¢ –î–ê–ù–ù–´–•")
                else:
                    print(f"{region_ru:20} {region_en:20} –û–®–ò–ë–ö–ê API: {response.status_code}")
            except Exception as e:
                print(f"{region_ru:20} {region_en:20} –û–®–ò–ë–ö–ê: {e}")

        print(f"\nüéØ –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –†–ï–ì–ò–û–ù–´ –° –ñ–ò–í–û–¢–ù–´–ú–ò:")
        for region_ru, region_en, total, animals in animal_regions:
            if animals > 0:
                print(f"   ‚Ä¢ {region_ru} ({region_en}) - {total} –∑–∞–ø–∏—Å–µ–π")

        return animal_regions

    def _fetch_from_api(self, region_name_en, region_name_ru):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ GBIF API - —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∂–∏–≤–æ—Ç–Ω—ã—Ö"""
        base_url = "https://api.gbif.org/v1"

        # –£–ª—É—á—à–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
        params_list = [
            # –ó–∞–ø—Ä–æ—Å 1: –¢–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã –∂–∏–≤–æ—Ç–Ω—ã—Ö
            {
                'country': 'RU',
                'stateProvince': region_name_en,
                'class': 'Mammalia,Aves,Reptilia,Amphibia,Insecta,Arachnida,Actinopterygii',
                'hasCoordinate': 'true',
                'basisOfRecord': 'HUMAN_OBSERVATION,OBSERVATION',
                'limit': 2000
            },
            # –ó–∞–ø—Ä–æ—Å 2: –¢–æ–ª—å–∫–æ –∂–∏–≤–æ—Ç–Ω—ã–µ —Å –Ω–∞–±–ª—é–¥–µ–Ω–∏—è–º–∏
            {
                'country': 'RU',
                'stateProvince': region_name_en,
                'kingdom': 'Animalia',
                'hasCoordinate': 'true',
                'basisOfRecord': 'HUMAN_OBSERVATION,OBSERVATION',
                'limit': 2000
            },
            # –ó–∞–ø—Ä–æ—Å 3: –ú–µ–Ω–µ–µ —Å—Ç—Ä–æ–≥–∏–π —Ñ–∏–ª—å—Ç—Ä
            {
                'country': 'RU',
                'stateProvince': region_name_en,
                'kingdom': 'Animalia',
                'hasCoordinate': 'true',
                'limit': 2000
            }
        ]

        for i, params in enumerate(params_list):
            print(f"üîó –ü–æ–ø—ã—Ç–∫–∞ {i + 1}: class={params.get('class', 'Animalia')}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –¥–ª—è —ç—Ç–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            cached_data = self.data_manager.get_api_cache(params)
            if cached_data:
                print("‚ôªÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ API")
                return cached_data

            try:
                response = requests.get(f"{base_url}/occurrence/search", params=params, timeout=30)
                if response.status_code == 200:
                    data = response.json()
                    print(f"üìä API –≤–µ—Ä–Ω—É–ª {data['count']} –∑–∞–ø–∏—Å–µ–π")

                    if data['count'] > 0:
                        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –Ω–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ
                        animal_data = self._process_api_response_strict(data.get('results', []))

                        if animal_data:
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                            self.data_manager.save_api_cache(params, animal_data)
                            print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫—ç—à: {len(animal_data)} –∂–∏–≤–æ—Ç–Ω—ã—Ö")
                            return animal_data
                        else:
                            print("‚ö†Ô∏è –ó–∞–ø–∏—Å–∏ –Ω–∞–π–¥–µ–Ω—ã, –Ω–æ –Ω–µ –ø—Ä–æ—à–ª–∏ —Å—Ç—Ä–æ–≥—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é")
                            # –ü–æ–∫–∞–∂–µ–º —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω–∞—à–ª–∏
                            self._debug_first_records(data.get('results', [])[:3])
                    else:
                        print("‚ùå –ó–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")

        return []

    def _process_api_response(self, records):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç API —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"""
        animal_data = []
        rejected_records = []

        total_records = len(records)
        print(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {total_records} –∑–∞–ø–∏—Å–µ–π...")

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        for i, record in enumerate(tqdm(records, desc="–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–µ–π", unit="rec")):
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 3 –∑–∞–ø–∏—Å–µ–π
            if i < 3:
                print(f"\nüìã –ó–ê–ü–ò–°–¨ {i + 1}:")
                print(f"   –ù–∞—É—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {record.get('scientificName', 'N/A')}")
                print(f"   Kingdom: {record.get('kingdom', 'N/A')}")
                print(f"   Phylum: {record.get('phylum', 'N/A')}")
                print(f"   Class: {record.get('class', 'N/A')}")

            # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∂–∏–≤–æ—Ç–Ω—ã—Ö
            kingdom = record.get('kingdom', '').lower()
            phylum = record.get('phylum', '').lower()
            class_name = record.get('class', '').lower()

            # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –∏—Å–∫–ª—é—á–∞–µ–º —è–≤–Ω—ã–µ –Ω–µ-–∂–∏–≤–æ—Ç–Ω—ã–µ
            if kingdom in ['plantae', 'fungi']:
                rejected_records.append(('not_animal', record.get('scientificName')))
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö
            is_animal = (
                    kingdom == 'animalia' or
                    phylum in ['chordata', 'arthropoda', 'mollusca'] or
                    class_name in ['mammalia', 'aves', 'reptilia', 'amphibia', 'actinopterygii', 'insecta']
            )

            if not is_animal:
                rejected_records.append(('not_animal', record.get('scientificName')))
                continue

            # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞ - —ç—Ç–æ –∂–∏–≤–æ—Ç–Ω–æ–µ
            species_key = record.get('speciesKey')

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –¥–ª—è —Ä—É—Å—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π —á—Ç–æ–±—ã —É—Å–∫–æ—Ä–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å
            common_name_ru = self._get_russian_common_name_cached(species_key)

            animal_info = {
                'scientific_name': record.get('scientificName', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'common_name': common_name_ru,
                'kingdom': record.get('kingdom', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'phylum': record.get('phylum', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'class': record.get('class', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'order': record.get('order', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'family': record.get('family', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'genus': record.get('genus', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'species': record.get('species', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'decimalLatitude': record.get('decimalLatitude'),
                'decimalLongitude': record.get('decimalLongitude'),
                'locality': record.get('locality', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'stateProvince': record.get('stateProvince', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'country': record.get('country', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'eventDate': record.get('eventDate', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'basisOfRecord': record.get('basisOfRecord', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'speciesKey': species_key,
                'record_id': record.get('key')
            }
            animal_data.append(animal_info)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç—Å–µ–≤–∞
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –§–ò–õ–¨–¢–†–ê–¶–ò–ò:")
        print(f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö: {len(animal_data)}")
        print(f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(rejected_records)}")

        return animal_data

    def get_animals_by_coordinates_radius(self, latitude, longitude, radius_km=50, limit=1000):
        """–ü–æ–∏—Å–∫ –∂–∏–≤–æ—Ç–Ω—ã—Ö –≤ —Ä–∞–¥–∏—É—Å–µ –æ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
        print(f"üìç –ü–æ–∏—Å–∫ –≤ —Ä–∞–¥–∏—É—Å–µ {radius_km} –∫–º –æ—Ç {latitude}, {longitude}")

        base_url = "https://api.gbif.org/v1"

        params = {
            'decimalLatitude': latitude,
            'decimalLongitude': longitude,
            'coordinateUncertaintyInMeters': radius_km * 1000,
            'class': 'Mammalia,Aves,Reptilia,Amphibia,Insecta',
            'hasCoordinate': 'true',
            'basisOfRecord': 'HUMAN_OBSERVATION,OBSERVATION',
            'limit': limit
        }

        try:
            response = requests.get(f"{base_url}/occurrence/search", params=params, timeout=30)
            if response.status_code == 200:
                data = response.json()
                print(f"üìä –ù–∞–π–¥–µ–Ω–æ {data['count']} –∑–∞–ø–∏—Å–µ–π –≤ —Ä–∞–¥–∏—É—Å–µ {radius_km} –∫–º")

                animal_data = self._process_api_response_strict(data.get('results', []))
                return animal_data
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
                return []

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ —Ä–∞–¥–∏—É—Å—É: {e}")
            return []

    def _debug_first_records(self, records):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–≤—ã—Ö –∑–∞–ø–∏—Å—è—Ö"""
        print("\nüîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ù–ê–ô–î–ï–ù–ù–´–• –ó–ê–ü–ò–°–Ø–•:")
        for i, record in enumerate(records):
            print(f"\n{i + 1}. {record.get('scientificName', 'N/A')}")
            print(f"   Kingdom: {record.get('kingdom', 'N/A')}")
            print(f"   Phylum: {record.get('phylum', 'N/A')}")
            print(f"   Class: {record.get('class', 'N/A')}")
            print(f"   Order: {record.get('order', 'N/A')}")
            print(f"   BasisOfRecord: {record.get('basisOfRecord', 'N/A')}")
            print(f"   Dataset: {record.get('datasetName', 'N/A')}")

    def search_known_russian_animals(self, region_name_en, limit=100):
        """–ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö –†–æ—Å—Å–∏–∏"""
        print(f"üîç –ü–æ–∏—Å–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö –†–æ—Å—Å–∏–∏ –≤ —Ä–µ–≥–∏–æ–Ω–µ {region_name_en}")

        # –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –∂–∏–≤–æ—Ç–Ω—ã–µ –†–æ—Å—Å–∏–∏
        known_animals = [
            "Ursus arctos",  # –ë—É—Ä—ã–π –º–µ–¥–≤–µ–¥—å
            "Canis lupus",  # –í–æ–ª–∫
            "Vulpes vulpes",  # –õ–∏—Å–∏—Ü–∞
            "Lepus timidus",  # –ó–∞—è—Ü-–±–µ–ª—è–∫
            "Sciurus vulgaris",  # –û–±—ã–∫–Ω–æ–≤–µ–Ω–Ω–∞—è –±–µ–ª–∫–∞
            "Cervus elaphus",  # –ë–ª–∞–≥–æ—Ä–æ–¥–Ω—ã–π –æ–ª–µ–Ω—å
            "Alces alces",  # –õ–æ—Å—å
            "Capreolus capreolus",  # –ö–æ—Å—É–ª—è
            "Lynx lynx",  # –†—ã—Å—å
            "Martes zibellina",  # –°–æ–±–æ–ª—å
            "Mustela erminea",  # –ì–æ—Ä–Ω–æ—Å—Ç–∞–π
            "Meles meles",  # –ë–∞—Ä—Å—É–∫
            "Castor fiber",  # –û–±—ã–∫–Ω–æ–≤–µ–Ω–Ω—ã–π –±–æ–±—Ä
            "Sus scrofa",  # –ö–∞–±–∞–Ω
            "Erinaceus europaeus",  # –û–±—ã–∫–Ω–æ–≤–µ–Ω–Ω—ã–π —ë–∂
            "Lacerta agilis",  # –ü—Ä—ã—Ç–∫–∞—è —è—â–µ—Ä–∏—Ü–∞
            "Natrix natrix",  # –û–±—ã–∫–Ω–æ–≤–µ–Ω–Ω—ã–π —É–∂
            "Bombina bombina",  # –ö—Ä–∞—Å–Ω–æ–±—Ä—é—Ö–∞—è –∂–µ—Ä–ª—è–Ω–∫–∞
            "Rana temporaria"  # –¢—Ä–∞–≤—è–Ω–∞—è –ª—è–≥—É—à–∫–∞
        ]

        base_url = "https://api.gbif.org/v1"
        all_animals = []

        for animal in known_animals[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–º –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
            params = {
                'scientificName': animal,
                'country': 'RU',
                'stateProvince': region_name_en,
                'hasCoordinate': 'true',
                'limit': 10
            }

            try:
                response = requests.get(f"{base_url}/occurrence/search", params=params, timeout=10)
                if response.status_code == 200:
                    data = response.json()
                    if data['count'] > 0:
                        print(f"‚úÖ {animal}: {len(data['results'])} –∑–∞–ø–∏—Å–µ–π")
                        all_animals.extend(data['results'])
                    else:
                        print(f"‚ùå {animal}: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                time.sleep(0.2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ {animal}: {e}")

        animal_data = self._process_api_response(all_animals)
        print(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(animal_data)} –∂–∏–≤–æ—Ç–Ω—ã—Ö –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –≤–∏–¥–æ–≤")
        return animal_data

    def get_animals_by_region(self, region_name_ru, force_update=False):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –∂–∏–≤–æ—Ç–Ω—ã—Ö –ø–æ —Ä–µ–≥–∏–æ–Ω—É"""
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –¥–ª—è GBIF
        region_name_en = self.get_correct_region_name(region_name_ru)
        print(f"üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –¥–ª—è GBIF: {region_name_en}")

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–º—è –¥–ª—è —Ñ–∞–π–ª–∞
        normalized_name = "".join(c for c in region_name_en if c.isalnum()).lower()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        if not force_update and self.data_manager.region_exists(normalized_name):
            print(f"üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {region_name_ru}")
            region_data = self.data_manager.get_region_data(normalized_name)
            if region_data:
                # –ü–µ—Ä–µ–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
                print("üî§ –ü–µ—Ä–µ–≤–æ–¥ —Ç–∞–∫—Å–æ–Ω–æ–º–∏–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π...")
                translated_data = []

                with tqdm(total=len(region_data), desc="üî§ –ü–µ—Ä–µ–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö", unit="animal",
                          bar_format='{l_bar}{bar:20}{r_bar}{bar:-20b}') as pbar:
                    for animal in region_data:
                        translated_data.append(self.translator.translate_animal_data(animal))
                        pbar.update(1)

                return translated_data

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        print(f"üåê –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –í–°–ï –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API –¥–ª—è {region_name_ru} ({region_name_en})")

        animal_data = self._fetch_from_api_large(region_name_en, region_name_ru)

        if animal_data:
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
            print("üî§ –ü–µ—Ä–µ–≤–æ–¥ —Ç–∞–∫—Å–æ–Ω–æ–º–∏–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π...")
            translated_data = []

            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º –æ–±—â–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
            with tqdm(total=len(animal_data), desc="üî§ –ü–µ—Ä–µ–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö", unit="animal",
                      bar_format='{l_bar}{bar:20}{r_bar}{bar:-20b}') as pbar:
                for animal in animal_data:
                    translated_data.append(self.translator.translate_animal_data(animal))
                    pbar.update(1)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º
            success = self.data_manager.save_region_data(region_name_en, region_name_ru, translated_data)
            if success:
                print(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ {region_name_ru} (—Ñ–∞–π–ª: {normalized_name}.json)")
            return translated_data
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {region_name_ru}")
            return []

    def _fetch_from_api_large(self, region_name_en, region_name_ru, batch_size=300):
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ GBIF API —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        base_url = "https://api.gbif.org/v1"

        all_animal_data = []
        offset = 0
        total_processed = 0
        has_more_data = True
        max_retries = 3  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–≤—Ç–æ—Ä–∞

        print(f"üîó –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –ø–∞—á–∫–∞–º–∏ –ø–æ {batch_size} –∑–∞–ø–∏—Å–µ–π...")

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        try:
            count_response = requests.get(f"{base_url}/occurrence/search",
                                          params={
                                              'country': 'RU',
                                              'stateProvince': region_name_en,
                                              'kingdom': 'Animalia',
                                              'limit': 0
                                          },
                                          timeout=30)
            if count_response.status_code == 200:
                total_estimate = count_response.json().get('count', 0)
                print(f"üìä –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ –≤—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_estimate}")
            else:
                total_estimate = 0
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count_response.status_code}")
        except Exception as e:
            total_estimate = 0
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: {e}")

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        pbar = tqdm(total=total_estimate, desc="üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö", unit="rec",
                    bar_format='{l_bar}{bar:20}{r_bar}{bar:-20b}')

        while has_more_data:
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
            params = {
                'country': 'RU',
                'stateProvince': region_name_en,
                'kingdom': 'Animalia',
                'limit': batch_size,
                'offset': offset
            }

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–∞—á–∫–∏
            cached_batch = self.data_manager.get_api_cache(params)
            if cached_batch:
                print(f"‚ôªÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–∞—á–∫—É {offset // batch_size + 1}")
                all_animal_data.extend(cached_batch)
                pbar.update(len(cached_batch))
                offset += batch_size
                continue

            retry_count = 0
            success = False

            while retry_count < max_retries and not success:
                try:
                    print(f"\nüì• –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—á–∫—É {offset // batch_size + 1}...")
                    response = requests.get(f"{base_url}/occurrence/search", params=params, timeout=60)

                    if response.status_code == 200:
                        data = response.json()
                        batch_records = data.get('results', [])

                        if not batch_records:
                            print("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                            has_more_data = False
                            break

                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–∞—á–∫—É
                        animal_data_batch = self._process_api_response_batch(batch_records)
                        all_animal_data.extend(animal_data_batch)

                        total_processed += len(batch_records)
                        pbar.update(len(batch_records))
                        pbar.set_postfix({'–∂–∏–≤–æ—Ç–Ω—ã—Ö': len(all_animal_data)})

                        print(f"\n‚úÖ –ü–∞—á–∫–∞ {offset // batch_size + 1}: {len(animal_data_batch)} –∂–∏–≤–æ—Ç–Ω—ã—Ö")

                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—á–∫—É –≤ –∫—ç—à
                        self.data_manager.save_api_cache(params, animal_data_batch)

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –¥–∞–Ω–Ω—ã–µ
                        if len(batch_records) < batch_size:
                            print("‚úÖ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü –¥–∞–Ω–Ω—ã—Ö")
                            has_more_data = False
                        else:
                            offset += batch_size

                        success = True

                    elif response.status_code == 503:
                        retry_count += 1
                        if retry_count < max_retries:
                            wait_time = retry_count * 10  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
                            print(
                                f"‚è∏Ô∏è –°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω (503). –ü–æ–ø—ã—Ç–∫–∞ {retry_count}/{max_retries} —á–µ—Ä–µ–∑ {wait_time} —Å–µ–∫...")
                            time.sleep(wait_time)
                        else:
                            print("‚ùå –°–µ—Ä–≤–µ—Ä –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É 503. –ü—Ä–µ—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É.")
                            has_more_data = False
                            break

                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
                        has_more_data = False
                        break

                except requests.exceptions.Timeout:
                    retry_count += 1
                    if retry_count < max_retries:
                        print(f"‚è∞ –¢–∞–π–º–∞—É—Ç. –ü–æ–ø—ã—Ç–∫–∞ {retry_count}/{max_retries}...")
                        time.sleep(5)
                    else:
                        print("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–µ")
                        has_more_data = False
                        break

                except Exception as e:
                    print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–∞—á–∫–∏ {offset // batch_size + 1}: {e}")
                    has_more_data = False
                    break

            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–∞–∂–µ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
            if success:
                time.sleep(0.5)

        pbar.close()
        print(f"\nüéØ –ò–¢–û–ì–û: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {total_processed} –∑–∞–ø–∏—Å–µ–π, –Ω–∞–π–¥–µ–Ω–æ {len(all_animal_data)} –∂–∏–≤–æ—Ç–Ω—ã—Ö")

        return all_animal_data

    def _process_api_response_batch(self, records):
        """–ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—á–∫–∏ –∑–∞–ø–∏—Å–µ–π —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
        animal_data = []

        for record in records:
            # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∂–∏–≤–æ—Ç–Ω—ã—Ö
            kingdom = record.get('kingdom', '').lower()
            phylum = record.get('phylum', '').lower()
            class_name = record.get('class', '').lower()

            # –ò—Å–∫–ª—é—á–∞–µ–º —è–≤–Ω—ã–µ –Ω–µ-–∂–∏–≤–æ—Ç–Ω—ã–µ –∏ –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –≥—Ä—É–ø–ø—ã
            if kingdom in ['plantae', 'fungi']:
                continue

            # –ò—Å–∫–ª—é—á–∞–µ–º —á–µ—Ä–≤–µ–π, –Ω–∞—Å–µ–∫–æ–º—ã—Ö –∏ –¥—Ä—É–≥–∏–µ –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –≥—Ä—É–ø–ø—ã
            if any(unwanted in phylum.lower() for unwanted in ['annelida', 'nematoda', 'platyhelminthes']):
                continue

            if any(unwanted in class_name.lower() for unwanted in ['clitellata', 'insecta', 'arachnida', 'gastropoda']):
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö
            is_interesting_animal = (
                kingdom == 'animalia' and (
                phylum in ['chordata'] or  # –¢–æ–ª—å–∫–æ —Ö–æ—Ä–¥–æ–≤—ã–µ
                class_name in ['mammalia', 'aves', 'reptilia', 'amphibia', 'actinopterygii']
                # –¢–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã
                )
            )

            if not is_interesting_animal:
                continue

            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
            species_key = record.get('speciesKey')
            common_name_ru = self._get_russian_common_name_cached(species_key)

            animal_info = {
                'scientific_name': record.get('scientificName', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'common_name': common_name_ru,
                'kingdom': record.get('kingdom', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'phylum': record.get('phylum', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'class': record.get('class', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'order': record.get('order', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'family': record.get('family', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'genus': record.get('genus', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'species': record.get('species', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'decimalLatitude': record.get('decimalLatitude'),
                'decimalLongitude': record.get('decimalLongitude'),
                'locality': record.get('locality', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'stateProvince': record.get('stateProvince', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'country': record.get('country', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'eventDate': record.get('eventDate', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'basisOfRecord': record.get('basisOfRecord', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'speciesKey': species_key,
                'record_id': record.get('key')
            }
            animal_data.append(animal_info)

        return animal_data

    def get_total_records_count(self, region_name_en):
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞"""
        base_url = "https://api.gbif.org/v1"

        params = {
            'country': 'RU',
            'stateProvince': region_name_en,
            'kingdom': 'Animalia',
            'limit': 0
        }

        try:
            response = requests.get(f"{base_url}/occurrence/search", params=params, timeout=30)
            if response.status_code == 200:
                return response.json().get('count', 0)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {e}")

        return 0

    def _fetch_from_api(self, region_name_en, region_name_ru):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ GBIF API"""
        base_url = "https://api.gbif.org/v1"

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        params = {
            'country': 'RU',
            'stateProvince': region_name_en,
            'kingdom': 'Animalia',
            'limit': 2000
        }

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cached_data = self.data_manager.get_api_cache(params)
        if cached_data:
            print("–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ API")
            return cached_data

        try:
            print(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ GBIF API...")
            response = requests.get(f"{base_url}/occurrence/search", params=params, timeout=30)
            if response.status_code == 200:
                data = response.json()
                print(f"API –≤–µ—Ä–Ω—É–ª {data['count']} –∑–∞–ø–∏—Å–µ–π")

                animal_data = self._process_api_response(data.get('results', []))

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                self.data_manager.save_api_cache(params, animal_data)
                print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫—ç—à: {len(animal_data)} –∂–∏–≤–æ—Ç–Ω—ã—Ö")

                return animal_data
            else:
                print(f"–û—à–∏–±–∫–∞ API: {response.status_code}")
                return []

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
            return []

    def get_correct_region_name(self, region_name_ru):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –¥–ª—è GBIF API"""
        region_mapping = {
            '–ó–∞–±–∞–π–∫–∞–ª—å—Å–∫–∏–π –∫—Ä–∞–π': 'Zabaykalsky Krai',
            '–ó–∞–±–∞–π–∫–∞–ª—å—Å–∫–∏–π': 'Zabaykalsky Krai',
            'Zabaykalsky': 'Zabaykalsky Krai',
            '–ö—Ä—ã–º': 'Crimea',
            '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö—Ä—ã–º': 'Crimea',
            '–ú–æ—Å–∫–≤–∞': 'Moscow',
            '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è': 'Moscow',
            '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥': 'Saint Petersburg',
            '–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è': 'Leningrad',
            '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π': 'Krasnodar Krai',
            '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∞—è': 'Krasnodar Krai',
            '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞—è': 'Novosibirsk',
            '–ê–º—É—Ä—Å–∫–∞—è': 'Amur',
            '–ë—Ä—è–Ω—Å–∫–∞—è': 'Bryansk',
            '–ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–∞—è': 'Nizhny Novgorod',
            '–¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω': 'Tatarstan',
            '–°–∞—Ö–∞–ª–∏–Ω': 'Sakhalin'
        }

        return region_mapping.get(region_name_ru, region_name_ru)

    def _process_api_response(self, records):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç API - —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–æ–π"""
        animal_data = []
        rejected_records = []

        print(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(records)} –∑–∞–ø–∏—Å–µ–π...")

        for i, record in enumerate(records):
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–≤—ã—Ö 3 –∑–∞–ø–∏—Å—è—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if i < 3:
                print(f"\n–ó–ê–ü–ò–°–¨ {i + 1}:")
                print(f"   –ù–∞—É—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {record.get('scientificName', 'N/A')}")
                print(f"   Kingdom: {record.get('kingdom', 'N/A')}")
                print(f"   Phylum: {record.get('phylum', 'N/A')}")
                print(f"   Class: {record.get('class', 'N/A')}")
                print(f"   BasisOfRecord: {record.get('basisOfRecord', 'N/A')}")

            # –ì–∏–±–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∂–∏–≤–æ—Ç–Ω—ã—Ö
            kingdom = record.get('kingdom', '').lower()
            phylum = record.get('phylum', '').lower()
            class_name = record.get('class', '').lower()
            basis_of_record = record.get('basisOfRecord', '').lower()

            # –ü—Ä–∏–∑–Ω–∞–∫–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö
            animal_indicators = [
                kingdom == 'animalia',
                phylum in ['chordata', 'arthropoda', 'mollusca', 'annelida', 'cnidaria', 'echinodermata'],
                class_name in [
                    'mammalia', 'aves', 'reptilia', 'amphibia', 'actinopterygii',
                    'insecta', 'arachnida', 'gastropoda', 'bivalvia', 'malacostraca',
                    'actinopoda', 'aves', 'branchiopoda', 'cephalopoda', 'clitellata',
                    'demospongiae', 'entognatha', 'eurotatoria', 'gymnolaemata',
                    'holothuroidea', 'hydrozoa', 'maxillopoda', 'merostomata',
                    'monogononta', 'oligochaeta', 'ostracoda', 'polychaeta',
                    'polyplacophora', 'scyphozoa', 'tentaculata', 'turbellaria'
                ]
            ]

            # –ü—Ä–∏–∑–Ω–∞–∫–∏ —Ä–∞—Å—Ç–µ–Ω–∏–π (–∏—Å–∫–ª—é—á–∞–µ–º)
            plant_indicators = [
                kingdom == 'plantae',
                phylum in ['magnoliophyta', 'tracheophyta', 'bryophyta', 'marchantiophyta'],
                class_name in ['magnoliopsida', 'liliopsida', 'pinopsida', 'lycopodiopsida'],
                'plant' in basis_of_record,
                'herbarium' in basis_of_record
            ]

            # –ü—Ä–∏–∑–Ω–∞–∫–∏ –≥—Ä–∏–±–æ–≤ (–∏—Å–∫–ª—é—á–∞–µ–º)
            fungus_indicators = [
                kingdom == 'fungi',
                phylum in ['ascomycota', 'basidiomycota']
            ]

            is_animal = any(animal_indicators)
            is_plant = any(plant_indicators)
            is_fungus = any(fungus_indicators)

            if is_plant or is_fungus:
                if i < 3:
                    print(f"–û–¢–ö–õ–û–ù–ï–ù–û: —Ä–∞—Å—Ç–µ–Ω–∏–µ –∏–ª–∏ –≥—Ä–∏–±")
                rejected_records.append(('plant/fungus', record.get('scientificName')))
                continue

            if not is_animal:
                if i < 3:
                    print(f"–û–¢–ö–õ–û–ù–ï–ù–û: –Ω–µ –∂–∏–≤–æ—Ç–Ω–æ–µ")
                rejected_records.append(('not_animal', record.get('scientificName')))
                continue

            # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞ - —ç—Ç–æ –∂–∏–≤–æ—Ç–Ω–æ–µ
            if i < 3:
                print(f"–ü–†–ò–ù–Ø–¢–û: –∂–∏–≤–æ—Ç–Ω–æ–µ")

            species_key = record.get('speciesKey')
            common_name_ru = self._get_russian_common_name(species_key)

            animal_info = {
                'scientific_name': record.get('scientificName', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'common_name': common_name_ru,
                'kingdom': record.get('kingdom', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'phylum': record.get('phylum', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'class': record.get('class', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'order': record.get('order', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'family': record.get('family', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'genus': record.get('genus', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'species': record.get('species', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'decimalLatitude': record.get('decimalLatitude'),
                'decimalLongitude': record.get('decimalLongitude'),
                'locality': record.get('locality', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'stateProvince': record.get('stateProvince', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'country': record.get('country', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'eventDate': record.get('eventDate', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'basisOfRecord': record.get('basisOfRecord', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'speciesKey': species_key,
                'record_id': record.get('key')
            }
            animal_data.append(animal_info)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç—Å–µ–≤–∞
        print(f"\n–°–¢–ê–¢–ò–°–¢–ò–ö–ê –§–ò–õ–¨–¢–†–ê–¶–ò–ò:")
        print(f"–ü—Ä–∏–Ω—è—Ç–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö: {len(animal_data)}")
        print(f"–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(rejected_records)}")

        if rejected_records:
            rejection_reasons = {}
            for reason, name in rejected_records:
                rejection_reasons[reason] = rejection_reasons.get(reason, 0) + 1
            print(f"üìà –ü—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: {rejection_reasons}")

        return animal_data

    def get_animals_by_coordinates(self, latitude, longitude, force_update=False):
        """–ü–æ–ª—É—á–∞–µ—Ç –∂–∏–≤–æ—Ç–Ω—ã—Ö –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º - –ø—Ä–æ–±—É–µ–º –æ–±–∞ –º–µ—Ç–æ–¥–∞"""
        print(f"–ü–æ–∏—Å–∫ –∂–∏–≤–æ—Ç–Ω—ã—Ö –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {latitude}, {longitude}")

        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞
        region_ru, region_en = self.get_region_by_coordinates(latitude, longitude)
        print(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ä–µ–≥–∏–æ–Ω: {region_ru} -> {region_en}")

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è GBIF
        correct_region_en = self.get_correct_region_name(region_ru)
        print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è GBIF: {correct_region_en}")

        animals_by_region = self.get_animals_by_region(region_ru, force_update)

        if animals_by_region:
            print(f"–ù–∞–π–¥–µ–Ω–æ {len(animals_by_region)} –∂–∏–≤–æ—Ç–Ω—ã—Ö —á–µ—Ä–µ–∑ —Ä–µ–≥–∏–æ–Ω '{region_ru}'")
            return animals_by_region
        else:
            print(f"–ß–µ—Ä–µ–∑ —Ä–µ–≥–∏–æ–Ω '{region_ru}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö, –ø—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π –ø–æ–∏—Å–∫...")
            # –ü—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
            animals_direct = self.get_animals_by_coordinates_direct(latitude, longitude)

            if animals_direct:
                print(f"–ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –Ω–∞—à–µ–ª {len(animals_direct)} –∂–∏–≤–æ—Ç–Ω—ã—Ö")
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö –ø–æ–¥ —Ä–µ–≥–∏–æ–Ω–æ–º
                if region_ru != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–≥–∏–æ–Ω":
                    self.data_manager.save_region_data(correct_region_en, region_ru, animals_direct)
                return animals_direct
            else:
                print("–û–±–∞ –º–µ—Ç–æ–¥–∞ –Ω–µ –¥–∞–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                return []

    def get_animals_by_coordinates_direct(self, latitude, longitude, radius_km=100, limit=1000):
        """–ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –∂–∏–≤–æ—Ç–Ω—ã—Ö –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º –±–µ–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞"""
        print(f"–ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º: {latitude}, {longitude}")

        base_url = "https://api.gbif.org/v1"

        params = {
            'decimalLatitude': latitude,
            'decimalLongitude': longitude,
            'coordinateUncertaintyInMeters': radius_km * 1000,
            'kingdom': 'Animalia',
            'hasCoordinate': 'true',
            'limit': limit
        }

        try:
            response = requests.get(f"{base_url}/occurrence/search", params=params, timeout=30)
            if response.status_code == 200:
                data = response.json()
                print(f"–ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –≤–µ—Ä–Ω—É–ª {data['count']} –∑–∞–ø–∏—Å–µ–π")

                animal_data = self._process_api_response(data.get('results', []))
                return animal_data
            else:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ –ø–æ–∏—Å–∫–∞: {response.status_code}")
                return []

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–º –ø–æ–∏—Å–∫–µ: {e}")
            return []

    def _get_russian_common_name(self, species_key):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–∞"""
        if not species_key:
            return '–ù–µ —É–∫–∞–∑–∞–Ω–æ'

        try:
            response = requests.get(f"https://api.gbif.org/v1/species/{species_key}/vernacularNames", timeout=5)
            if response.status_code == 200:
                vernacular_data = response.json()
                for vernacular in vernacular_data.get('results', []):
                    if vernacular.get('language') == 'rus':
                        return vernacular.get('vernacularName')
        except:
            pass

        return '–ù–µ —É–∫–∞–∑–∞–Ω–æ'

    def test_popular_regions(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫ –≤ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö"""
        test_coordinates = [
            (55.7558, 37.6173, "–ú–æ—Å–∫–≤–∞"),  # –ú–æ—Å–∫–≤–∞
            (59.9343, 30.3351, "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"),  # –°–ü–±
            (45.0355, 38.9753, "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä"),  # –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä
            (56.8389, 60.6057, "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥"),  # –°–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∞—è
            (54.9833, 73.3667, "–û–º—Å–∫"),  # –û–º—Å–∫–∞—è
            (56.3269, 44.0065, "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥"),  # –ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–∞—è
            (55.7963, 49.1088, "–ö–∞–∑–∞–Ω—å"),  # –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω
        ]

        print("\n–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–ü–£–õ–Ø–†–ù–´–• –†–ï–ì–ò–û–ù–û–í:")
        print("=" * 50)

        for lat, lon, region_name in test_coordinates:
            print(f"\n–¢–µ—Å—Ç–∏—Ä—É–µ–º {region_name} ({lat}, {lon})")
            animals = self.get_animals_by_coordinates(lat, lon)

            if animals:
                print(f"–£–°–ü–ï–•: –Ω–∞–π–¥–µ–Ω–æ {len(animals)} –∂–∏–≤–æ—Ç–Ω—ã—Ö")
                # –ü–æ–∫–∞–∂–µ–º —Ç–æ–ø-3
                df = pd.DataFrame(animals)
                top_species = df['scientific_name'].value_counts().head(3)
                for species, count in top_species.items():
                    common_name = df[df['scientific_name'] == species]['common_name'].iloc[0]
                    print(
                        f"   ‚Ä¢ {species} ({common_name if common_name != '–ù–µ —É–∫–∞–∑–∞–Ω–æ' else '–Ω–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è'}) - {count}")
            else:
                print(f"–ù–ï –£–î–ê–õ–û–°–¨: –∂–∏–≤–æ—Ç–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    def analyze_region(self, region_name_ru):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω–∞"""
        animals = self.get_animals_by_region(region_name_ru)

        if not animals:
            print(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ {region_name_ru}")
            return

        print(f"\n{'=' * 60}")
        print(f"–ê–ù–ê–õ–ò–ó –ñ–ò–í–û–¢–ù–´–• –í {region_name_ru.upper()} –û–ë–õ–ê–°–¢–ò")
        print(f"{'='*60}")

        print(f"\n–°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(animals)}")
        print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–∏–¥–æ–≤: {len(set([a['scientific_name'] for a in animals]))}")

        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–ª–∞—Å—Å–∞–º
        class_counts = {}
        for animal in animals:
            class_name = animal.get('class_ru', animal.get('class', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))
            class_counts[class_name] = class_counts.get(class_name, 0) + 1

        print(f"\n–†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –ö–õ–ê–°–°–ê–ú:")
        for class_name, count in sorted(class_counts.items(), key=lambda x: x[1], reverse=True):
            percentage = (count / len(animals)) * 100
            print(f"  {class_name}: {count} ({percentage:.1f}%)")

        # –¢–æ–ø –≤–∏–¥–æ–≤
        species_counts = {}
        for animal in animals:
            species_name = animal['scientific_name']
            common_name = animal.get('common_name', '–ù–µ—Ç —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è')
            species_counts[species_name] = species_counts.get(species_name, {'count': 0, 'common_name': common_name})
            species_counts[species_name]['count'] += 1

        top_species = sorted(species_counts.items(), key=lambda x: x[1]['count'], reverse=True)[:5]

        if top_species:
            print(f"\n–¢–û–ü-5 –í–ò–î–û–í:")
            for i, (species, info) in enumerate(top_species, 1):
                common_name = info['common_name']
                class_name = next(a.get('class_ru', a.get('class', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')) for a in animals if
                                   a['scientific_name'] == species)
                print(f"{i}. {species}")
                print(f"{common_name}" if common_name != '–ù–µ —É–∫–∞–∑–∞–Ω–æ' else "–ù–µ—Ç —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è")
                print(f"{class_name}")
                print(f"–ù–∞—Ö–æ–¥–æ–∫: {info['count']}")
                print()

    def show_detailed_animal_info(self, animals, count=5):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö"""
        print(f"\nüîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û {count} –ñ–ò–í–û–¢–ù–´–•:")
        for i, animal in enumerate(animals[:count], 1):
            print(f"\n{i}. {animal.get('common_name', '–ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è')}")
            print(f"   –ù–∞—É—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {animal['scientific_name']}")
            print(f"   –¢–∏–ø: {animal.get('phylum_ru', animal.get('phylum', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))}")
            print(f"   –ö–ª–∞—Å—Å: {animal.get('class_ru', animal.get('class', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))}")
            print(f"   –û—Ç—Ä—è–¥: {animal.get('order_ru', animal.get('order', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))}")
            print(f"   –°–µ–º–µ–π—Å—Ç–≤–æ: {animal.get('family_ru', animal.get('family', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))}")
            print(f"   –†–æ–¥: {animal.get('genus_ru', animal.get('genus', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))}")
            if animal.get('locality') and animal['locality'] != '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
                print(f"   –ú–µ—Å—Ç–æ: {animal['locality']}")
            if animal.get('eventDate') and animal['eventDate'] != '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
                print(f"   –î–∞—Ç–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è: {animal['eventDate']}")

    def get_animals_combined(self, region_name_ru, force_update=False):
        """–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –∂–∏–≤–æ—Ç–Ω—ã—Ö: GBIF + –ª–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
        print(f"–ö–û–ú–ë–ò–ù–ò–†–û–í–ê–ù–ù–´–ô –ü–û–ò–°–ö –î–õ–Ø {region_name_ru}")

        # 1. –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ GBIF
        gbif_animals = self.get_animals_by_region(region_name_ru, force_update)

        # 2. –ü–æ–ª—É—á–∞–µ–º –∂–∏–≤–æ—Ç–Ω—ã—Ö –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        local_animals = self.animals_db.get_animals_by_region(region_name_ru)
        print(f"–õ–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞: {len(local_animals)} –∂–∏–≤–æ—Ç–Ω—ã—Ö")

        # 3. –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        all_animals = self._merge_animal_data(gbif_animals, local_animals)

        # 4. –ü–†–ò–ú–ï–ù–Ø–ï–ú –§–ò–õ–¨–¢–†–ê–¶–ò–Æ –ö –û–ë–™–ï–î–ò–ù–ï–ù–ù–´–ú –î–ê–ù–ù–´–ú
        filtered_animals = self.filter_animals_data(all_animals, min_count=1)

        print(f"–ò–¢–û–ì–û: {len(filtered_animals)} –∂–∏–≤–æ—Ç–Ω—ã—Ö ({len(gbif_animals)} –∏–∑ GBIF + {len(local_animals)} –∏–∑ –±–∞–∑—ã)")
        return filtered_animals

    def _merge_animal_data(self, gbif_animals, local_animals):
        """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ GBIF –∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã"""
        merged_animals = []
        seen_species = set()

        # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∂–∏–≤–æ—Ç–Ω—ã—Ö –∏–∑ GBIF
        for animal in gbif_animals:
            species = animal.get('scientific_name')
            if species and species not in seen_species:
                merged_animals.append(animal)
                seen_species.add(species)

        # –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –∂–∏–≤–æ—Ç–Ω—ã—Ö –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã (—Ç–æ–ª—å–∫–æ —Ç–µ—Ö, –∫–æ–≥–æ –Ω–µ—Ç –≤ GBIF)
        for animal in local_animals:
            species = animal.get('scientific_name')
            if species and species not in seen_species:
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                enhanced_animal = {
                    'scientific_name': animal['scientific_name'],
                    'common_name': animal['common_name'],
                    'class_ru': animal.get('class_ru', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                    'phylum_ru': animal.get('phylum_ru', '–•–æ—Ä–¥–æ–≤—ã–µ'),
                    'order_ru': '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                    'family_ru': '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                    'genus_ru': '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                    'source': 'local_db',
                    'region': animal.get('region', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                }
                merged_animals.append(enhanced_animal)
                seen_species.add(species)

        return merged_animals

    def analyze_region_combined(self, region_name_ru):
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
        animals = self.get_animals_combined(region_name_ru)

        if not animals:
            print(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ {region_name_ru}")
            return

        # –§–ò–õ–¨–¢–†–£–ï–ú –î–ê–ù–ù–´–ï - —É–±–∏—Ä–∞–µ–º —Ä–µ–¥–∫–∏–µ –∏ –Ω–µ–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        filtered_animals = self.filter_animals_data(animals, min_count=2)

        # –†–∞–∑–¥–µ–ª—è–µ–º –∂–∏–≤–æ—Ç–Ω—ã—Ö –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º (–ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏)
        gbif_animals = [a for a in filtered_animals if a.get('source') != 'local_db']
        local_animals = [a for a in filtered_animals if a.get('source') == 'local_db']

        print(f"\n{'=' * 60}")
        print(f"–ö–û–ú–ë–ò–ù–ò–†–û–í–ê–ù–ù–´–ô –ê–ù–ê–õ–ò–ó –ñ–ò–í–û–¢–ù–´–• –í {region_name_ru.upper()}")
        print(f"{'=' * 60}")

        print(f"\n–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"–í—Å–µ–≥–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö: {len(filtered_animals)}")
        print(f"‚Ä¢ –ù–∞–π–¥–µ–Ω–æ –≤ GBIF: {len(gbif_animals)}")
        print(f"‚Ä¢ –ò–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {len(local_animals)}")

        if not filtered_animals:
            print("–ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –∑–Ω–∞—á–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            return

        # –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–ª–∞—Å—Å–∞–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
        class_stats = {}
        for animal in filtered_animals:
            class_name = animal.get('class_ru', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            class_stats[class_name] = class_stats.get(class_name, 0) + 1

        print(f"\n–†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –ö–õ–ê–°–°–ê–ú:")
        for class_name, count in sorted(class_stats.items(), key=lambda x: x[1], reverse=True):
            percentage = (count / len(filtered_animals)) * 100
            print(f"  {class_name}: {count} ({percentage:.1f}%)")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∂–∏–≤–æ—Ç–Ω—ã—Ö –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        if gbif_animals:
            print(f"\n–ü–†–ò–ú–ï–†–´ –ò–ó GBIF:")
            for animal in gbif_animals[:5]:
                name = animal.get('common_name', animal['scientific_name'])
                print(f"  ‚Ä¢ {name}")

        if local_animals:
            print(f"\n–ü–û–ü–£–õ–Ø–†–ù–´–ï –í–ò–î–´ –ò–ó –ë–ê–ó–´ –î–ê–ù–ù–´–•:")
            for animal in local_animals[:8]:
                print(f"  ‚Ä¢ {animal['common_name']} ({animal['scientific_name']})")

    def filter_animals_data(self, animals, min_count=1, exclude_classes=None):
        """–§–∏–ª—å—Ç—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö - —É–±–∏—Ä–∞–µ–º –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∫–ª–∞—Å—Å—ã, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –º–ª–µ–∫–æ–ø–∏—Ç–∞—é—â–∏—Ö, –ø—Ç–∏—Ü –∏ —Ç.–¥."""
        if exclude_classes is None:
            # –¢–æ–ª—å–∫–æ —Å–∞–º—ã–µ –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∫–ª–∞—Å—Å—ã
            exclude_classes = [
                'Clitellata', '–ö–æ–ª—å—á–∞—Ç—ã–µ —á–µ—Ä–≤–∏', '–û–ª–∏–≥–æ—Ö–µ—Ç—ã',
                '–ü–∞—É–∫–æ–æ–±—Ä–∞–∑–Ω—ã–µ', 'Arachnida',
                '–ù–∞—Å–µ–∫–æ–º—ã–µ', 'Insecta',
                '–î–∏–ø–ª–æ–ø–æ–¥—ã', '–ú–Ω–æ–≥–æ–Ω–æ–∂–∫–∏',
                '–ì—É–±–∫–∏', 'Porifera',
                '–ë—Ä—é—Ö–æ–Ω–æ–≥–∏–µ', 'Gastropoda',
                '–î–≤—É—Å—Ç–≤–æ—Ä—á–∞—Ç—ã–µ', 'Bivalvia',
                '–ö–æ–ª–ª–µ–º–±–æ–ª—ã', 'Collembola',
                '–†–∞–∫–æ–æ–±—Ä–∞–∑–Ω—ã–µ', 'Crustacea',
                '–ù–µ–º–∞—Ç–æ–¥—ã', 'Nematoda',
                '–ü–ª–æ—Å–∫–∏–µ —á–µ—Ä–≤–∏', 'Platyhelminthes',
                '–ö–æ–ª–æ–≤—Ä–∞—Ç–∫–∏', 'Rotifera',
                '–¢–∏—Ö–æ—Ö–æ–¥–∫–∏', 'Tardigrada',
                '–ú—à–∞–Ω–∫–∏', 'Bryozoa',
                '–ñ–∞–±—Ä–æ–Ω–æ–≥–∏–µ', 'Branchiopoda'
            ]

        # –°–Ω–∞—á–∞–ª–∞ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≤–∏–¥–∞–º –∏ —Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        species_counts = {}
        for animal in animals:
            species = animal.get('scientific_name')
            if species and species != '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
                species_counts[species] = species_counts.get(species, 0) + 1

        # –§–∏–ª—å—Ç—Ä—É–µ–º –∂–∏–≤–æ—Ç–Ω—ã—Ö
        filtered_animals = []
        for animal in animals:
            species = animal.get('scientific_name')
            animal_class = animal.get('class_ru', animal.get('class', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            should_include = (
                    species and
                    species != '–ù–µ —É–∫–∞–∑–∞–Ω–æ' and
                    species_counts.get(species, 0) >= min_count and
                    animal_class not in exclude_classes and
                    self._is_informative_animal_record(animal)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
            )

            if should_include:
                filtered_animals.append(animal)

        removed_count = len(animals) - len(filtered_animals)
        if removed_count > 0:
            print(f"–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è: —É–±—Ä–∞–Ω–æ {removed_count} –Ω–µ–∑–Ω–∞—á–∏–º—ã—Ö –∑–∞–ø–∏—Å–µ–π")

        return filtered_animals

    def _is_worm_or_insect(self, animal):
        """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–µ—Ä–≤–µ–π, –Ω–∞—Å–µ–∫–æ–º—ã—Ö –∏ –¥—Ä—É–≥–∏–µ –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –≥—Ä—É–ø–ø—ã"""
        scientific_name = animal.get('scientific_name', '').lower()
        common_name = animal.get('common_name', '').lower()
        phylum = animal.get('phylum', '').lower()
        animal_class = animal.get('class', '').lower()

        # –ü—Ä–∏–∑–Ω–∞–∫–∏ —á–µ—Ä–≤–µ–π
        worm_indicators = [
            'clitellata', 'oligochaeta', 'enchytraeidae', 'annelida',
            'nematoda', 'platyhelminthes', 'rotifera', 'tardigrada',
            '—á–µ—Ä–≤—å', 'worm', '–Ω–µ–º–∞—Ç–æ–¥', '–∫–æ–ª–æ–≤—Ä–∞—Ç–∫'
        ]

        # –ü—Ä–∏–∑–Ω–∞–∫–∏ –Ω–∞—Å–µ–∫–æ–º—ã—Ö –∏ –ø–∞—É–∫–æ–≤
        insect_indicators = [
            'insecta', 'arachnida', 'diplopoda', 'crustacea',
            'gastropoda', 'bivalvia', 'collembola', 'bryozoa',
            '–Ω–∞—Å–µ–∫–æ–º', '–ø–∞—É–∫', '–º–æ–ª–ª—é—Å–∫', '—Ä–∞–∫–æ–æ–±—Ä–∞–∑–Ω'
        ]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ä–∞–∑–Ω—ã–º –ø–æ–ª—è–º
        for field in [scientific_name, common_name, phylum, animal_class]:
            if any(indicator in field for indicator in worm_indicators + insect_indicators):
                return True

        return False

    def _is_uninformative_animal(self, animal):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∂–∏–≤–æ—Ç–Ω–æ–µ –Ω–µ–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º"""
        scientific_name = animal.get('scientific_name', '').lower()
        common_name = animal.get('common_name', '').lower()

        # –ü—Ä–∏–∑–Ω–∞–∫–∏ –Ω–µ–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        uninformative_indicators = [
            # –°–ª–∏—à–∫–æ–º –æ–±—â–∏–µ —Ç–∞–∫—Å–æ–Ω—ã
            'idae', 'inae', 'iformes', 'acea', 'oidea',
            # –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
            'sp.', 'spp.', 'unknown', 'unidentified', 'indet.',
            # –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ/–¥–æ–º–∞—à–Ω–∏–µ –≤–∏–¥—ã
            'mus musculus', 'rattus norvegicus', 'drosophila',
            # –ò—Å–∫–æ–ø–∞–µ–º—ã–µ –≤–∏–¥—ã (—á–∞—Å—Ç–æ –∏–º–µ—é—Ç —Å—Ç—Ä–∞–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è)
            'ites', 'ensis', 'oides'
        ]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞—Å—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å–µ–≥–¥–∞ –∏—Å–∫–ª—é—á–∞–µ–º
        animal_class = animal.get('class_ru', '').lower()
        if any(unwanted in animal_class for unwanted in ['–Ω–∞—Å–µ–∫–æ–º—ã–µ', '–ø–∞—É–∫–æ–æ–±—Ä–∞–∑–Ω—ã–µ', '—á–µ—Ä–≤–∏', '–º–æ–ª–ª—é—Å–∫–∏']):
            return True

        return any(indicator in scientific_name for indicator in uninformative_indicators)

    def show_animals_by_class(self, region_name_ru, class_name):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ –≤ —Ä–µ–≥–∏–æ–Ω–µ"""
        animals = self.get_animals_combined(region_name_ru)

        if not animals:
            print(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ {region_name_ru}")
            return []

        # –§–∏–ª—å—Ç—Ä—É–µ–º –∂–∏–≤–æ—Ç–Ω—ã—Ö –ø–æ –∫–ª–∞—Å—Å—É –∏ —É–±–∏—Ä–∞–µ–º –Ω–µ–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        class_animals = []
        for animal in animals:
            animal_class = animal.get('class_ru', animal.get('class', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))

            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤
            normalized_class = self._normalize_class_name(animal_class)
            normalized_target = self._normalize_class_name(class_name)

            if normalized_class == normalized_target:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏ (–Ω–∞–∑–≤–∞–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤ –≤–º–µ—Å—Ç–æ –≤–∏–¥–æ–≤)
                if self._is_informative_animal_record(animal):
                    class_animals.append(animal)

        if not class_animals:
            print(f"–í —Ä–µ–≥–∏–æ–Ω–µ {region_name_ru} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∂–∏–≤–æ—Ç–Ω—ã–µ –∫–ª–∞—Å—Å–∞ '{class_name}'")
            return []

        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –Ω–∞—É—á–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é –∏ —Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—Ö–æ–¥–æ–∫
        species_counts = {}
        for animal in class_animals:
            sci_name = animal['scientific_name']
            if sci_name not in species_counts:
                species_counts[sci_name] = {
                    'animal': animal,
                    'count': 1
                }
            else:
                species_counts[sci_name]['count'] += 1

        unique_list = [data['animal'] for data in species_counts.values()]
        count_data = {sci_name: data['count'] for sci_name, data in species_counts.items()}

        print(f"\n{'=' * 60}")
        print(f"{class_name.upper()} –í {region_name_ru.upper()} –û–ë–õ–ê–°–¢–ò")
        print(f"{'=' * 60}")
        print(f"–ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–∏–¥–æ–≤: {len(unique_list)}")
        print(f"{'=' * 60}")

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä—É—Å—Å–∫–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é
        sorted_animals = sorted(unique_list, key=lambda x: x.get('common_name', x['scientific_name']))

        for i, animal in enumerate(sorted_animals, 1):
            common_name = animal.get('common_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            scientific_name = animal['scientific_name']
            count = count_data.get(scientific_name, 1)

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–ª–∞—Å—Å–æ–≤, –∞ –Ω–µ –≤–∏–¥–æ–≤
            if scientific_name.lower() in ['mammalia', 'aves', 'reptilia', 'amphibia']:
                continue

            print(f"\n{i}. {common_name}")
            print(f"–ù–∞—É—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {scientific_name}")
            print(f"–ù–∞—Ö–æ–¥–æ–∫ –≤ —Ä–µ–≥–∏–æ–Ω–µ: {count}")

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            if animal.get('order_ru') and animal['order_ru'] != '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
                print(f"–û—Ç—Ä—è–¥: {animal['order_ru']}")
            if animal.get('family_ru') and animal['family_ru'] != '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
                print(f"–°–µ–º–µ–π—Å—Ç–≤–æ: {animal['family_ru']}")

            # –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
            source = "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö" if animal.get('source') == 'local_db' else "GBIF"
            print(f"   {source}")

        return unique_list

    def get_available_classes(self, region_name_ru):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤ –∂–∏–≤–æ—Ç–Ω—ã—Ö –≤ —Ä–µ–≥–∏–æ–Ω–µ"""
        animals = self.get_animals_combined(region_name_ru)

        if not animals:
            return []

        classes = set()
        for animal in animals:
            animal_class = animal.get('class_ru', animal.get('class', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))
            if animal_class and animal_class != '–ù–µ —É–∫–∞–∑–∞–Ω–æ' and self._is_informative_animal_record(animal):
                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤
                normalized_class = self._normalize_class_name(animal_class)
                classes.add(normalized_class.title())  # –î–µ–ª–∞–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∑–∞–≥–ª–∞–≤–Ω–æ–π

        return sorted(list(classes))

    def _normalize_class_name(self, class_name):
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        normalization_map = {
            '–∞–º—Ñ–∏–±–∏–∏': '–∑–µ–º–Ω–æ–≤–æ–¥–Ω—ã–µ',
            '—Ä–µ–ø—Ç–∏–ª–∏–∏': '–ø—Ä–µ—Å–º—ã–∫–∞—é—â–∏–µ—Å—è',
            'mammalia': '–º–ª–µ–∫–æ–ø–∏—Ç–∞—é—â–∏–µ',
            'aves': '–ø—Ç–∏—Ü—ã',
            'reptilia': '–ø—Ä–µ—Å–º—ã–∫–∞—é—â–∏–µ—Å—è',
            'amphibia': '–∑–µ–º–Ω–æ–≤–æ–¥–Ω—ã–µ'
        }

        normalized = class_name.lower().strip()
        return normalization_map.get(normalized, normalized)

    def _is_informative_animal_record(self, animal):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø–∏—Å—å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–π (–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –≤–∏–¥–æ–º, –∞ –Ω–µ –∫–ª–∞—Å—Å–æ–º)"""
        scientific_name = animal.get('scientific_name', '').lower()

        # –ò—Å–∫–ª—é—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤ –∏ —Å–ª–∏—à–∫–æ–º –æ–±—â–∏–µ —Ç–∞–∫—Å–æ–Ω—ã
        excluded_names = [
            'mammalia', 'aves', 'reptilia', 'amphibia', 'actinopterygii',
            'animalia', 'chordata', 'vertebrata', 'metazoa'
        ]

        # –ò—Å–∫–ª—é—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –±–µ–∑ –≤–∏–¥–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
        if not scientific_name or scientific_name in excluded_names:
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–µ—Ä–æ—è—Ç–Ω–æ –≤–∏–¥–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (—Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ–±–µ–ª –∏–ª–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è)
        if ' ' in scientific_name or any(scientific_name.endswith(ending) for ending in ['us', 'a', 'is', 'ensis']):
            return True

        return False

# –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
def main():
    finder = AnimalFinder()

    print("üêæ –°–ò–°–¢–ï–ú–ê –ü–û–ò–°–ö–ê –ñ–ò–í–û–¢–ù–´–• –ü–û –ö–û–û–†–î–ò–ù–ê–¢–ê–ú")
    print("=" * 50)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    available_regions = finder.get_available_regions_list()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    print("\nüí° –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
    print("   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ 4 - —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –í–°–ï —Ä–µ–≥–∏–æ–Ω—ã –†–æ—Å—Å–∏–∏")
    print("   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ 5 - —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–≥–∏–æ–Ω—ã —Å –¥–∞–Ω–Ω—ã–º–∏")
    print("   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ 6 - —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")

    while True:
        print(f"\nüí° –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã: {', '.join(available_regions)}")
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:")
        print("1. –ü–æ–∏—Å–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º")
        print("2. –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ä–µ–≥–∏–æ–Ω–∞")
        print("3. –ü–æ–∫–∞–∑–∞—Ç—å –∂–∏–≤–æ—Ç–Ω—ã—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞")
        print("4. üìã –ü–æ–∫–∞–∑–∞—Ç—å –í–°–ï —Ä–µ–≥–∏–æ–Ω—ã –†–æ—Å—Å–∏–∏")
        print("5. üìä –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–≥–∏–æ–Ω—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ —Å–∏—Å—Ç–µ–º–µ")
        print("6. –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–≥–∏–æ–Ω–æ–≤")
        print("7. –í—ã—Ö–æ–¥")

        choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1-7): ").strip()

        if choice == '1':
            # –†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
            try:
                lat_input = input("–í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–æ—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 55.7558): ").strip().replace(',', '.')
                lon_input = input("–í–≤–µ–¥–∏—Ç–µ –¥–æ–ª–≥–æ—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 37.6173): ").strip().replace(',', '.')

                lat = float(lat_input)
                lon = float(lon_input)

                animals = finder.get_animals_by_coordinates(lat, lon)
                if animals:
                    region_ru, region_en = finder.get_region_by_coordinates(lat, lon)
                    finder.analyze_region_combined(region_ru)
                    finder.show_detailed_animal_info_improved(animals)
                else:
                    print("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç")

            except ValueError:
                print("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç")

        elif choice == '2':
            # –†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω—É
            print(f"\nüí° –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã: {', '.join(available_regions)}")
            region_input = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞: ").strip()

            animals = finder.get_animals_by_region(region_input)
            if animals:
                finder.analyze_region_improved(region_input)
                finder.show_detailed_animal_info_improved(animals)
            else:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ {region_input}")

        elif choice == '3':
            # –†–µ–∂–∏–º: –∂–∏–≤–æ—Ç–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
            print(f"\nüí° –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã: {', '.join(available_regions)}")
            region_input = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞: ").strip()

            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
            available_classes = finder.get_available_classes(region_input)

            if not available_classes:
                print(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö –≤ —Ä–µ–≥–∏–æ–Ω–µ {region_input}")
                continue

            print(f"\n–î–û–°–¢–£–ü–ù–´–ï –ö–õ–ê–°–°–´ –ñ–ò–í–û–¢–ù–´–• –í {region_input.upper()}:")
            for i, class_name in enumerate(available_classes, 1):
                print(f"{i}. {class_name}")

            try:
                class_choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞: ").strip()
                if class_choice.isdigit():
                    class_index = int(class_choice) - 1
                    if 0 <= class_index < len(available_classes):
                        selected_class = available_classes[class_index]
                        finder.show_animals_by_class(region_input, selected_class)
                    else:
                        print("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞")
                else:
                    # –ü–æ–∑–≤–æ–ª—è–µ–º –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –Ω–∞–ø—Ä—è–º—É—é
                    finder.show_animals_by_class(region_input, class_choice)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞: {e}")

        elif choice == '4':
            # –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ä–µ–≥–∏–æ–Ω—ã –†–æ—Å—Å–∏–∏
            finder.show_all_regions_list()

        elif choice == '5':
            # –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–≥–∏–æ–Ω—ã —Å –¥–∞–Ω–Ω—ã–º–∏
            available_with_data = finder.show_available_regions_with_data()
            if available_with_data:
                print(f"\nüí° –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ —Ä–µ–≥–∏–æ–Ω—ã –≤ –ø–æ–∏—Å–∫–µ (–ø—É–Ω–∫—Ç 2)")

        elif choice == '6':
            # –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤
            finder.show_regions_statistics()
            available_regions = finder.get_available_regions_list()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫

        elif choice == '7':
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break

        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")


if __name__ == "__main__":
    main()